{"version":3,"sources":["components/Tab.js","components/Tabs.js","components/DropdownOptions.js","components/DropdownOptions2.js","components/ScatterChart.js","components/Correlation.js","components/CauseGraph.js","components/Temporal.js","components/CauseSubgroups.js","components/CauseYears.js","components/TempSubgroups.js","components/TempDisease.js","components/SortableTable.js","components/TableGrid.js","components/SubgroupTables.js","components/ICDropdown.js","components/DropdownCodes.js","components/ICDPicker.js","components/ICDExplorer.js","components/ICDSelector.js","components/LeadingSelector.js","components/AdjustedGraphs.js","components/Adjusted.js","components/SubgroupGraph.js","components/SubgroupYears.js","components/SubgroupGraphs.js","components/AsianSubgroups.js","components/App.js","index.js"],"names":["Tab","onClick","_this$props","_this","props","label","this","_this$props2","activeTab","className","react_default","a","createElement","Component","Tabs","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onClickTabItem","tab","setState","state","children","map","child","components_Tab","key","DropdownOptions","handleChange","e","_ref","value","getDropdownValue","Dropdown","onChange","bind","options","placeholder","selection","fluid","React","DropdownOptions2","getDropdownValue2","ScatterChart","index_esm","height","chartType","loader","data","dataObjs","title","y_var","x_var","titleTextStyle","color","fontSize","bold","italic","hAxis","vAxis","chartArea","width","tooltip","isHtml","trigger","legend","textStyle","maxLines","trendlines","display_trend","0","type","showR2","visibleInLegend","rootProps","data-testid","VAR2_NAMES","VAR1_NAMES","CauseGraph","Segment","basic","yearData","subgroupNames","top","colors","legendToggle","Temporal","icdData","icd","icdHeader","diseaseName","_this2","Grid","columns","stackable","Row","idx","Column","components_CauseGraph","CauseSubgroups","year","subgroup","TableExampleSortable","column","direction","handleSort","clickedColumn","_this$state","reverse","_","sortBy","_this$state2","Table","sortable","celled","fixed","compact","size","Header","HeaderCell","sorted","Body","Count","gender","Cause","Cell","yrs","TableGrid","group","as","textAlign","SortableTable_TableExampleSortable","asian_subgroup","DropdownExampleSelectOnNavigation","name","defineProperty","console","log","default","options1","Form","Field","icdDropOptions","multiple","JSON","stringify","search","icdTables","selectedOptions","populateRenderArray","items","icdDict","dataReady","optionsReady","drawGraph","fetch","then","response","json","batchRowValues","valueRanges","values","rows","i","length","rowObject","j","push","item","currICD","ICD_Code","currRace","Subgroup_race","icdCodesDict","Year_death","parseInt","Male","Female","keys","icdOptionsSorted","toConsumableArray","Set","sort","icdOptionsReady","forEach","arr","text","concat","slice","join","diseaseInfo","raceDict","race","info","padded","href","target","DropdownCodes_DropdownExampleSelectOnNavigation","components_Temporal","Description","RaceText","M","F","centered","minValue","AgeGroup","Divider","hidden","AdjustedGraphs","position","year_label","years","yr","SubgroupGraph","subgroupDict","leading_causes","subgroupName","oneSubgroupDict","cause","currIndex","indexOf","splice","App","icdReady","icd_trunc","ICD_trunc","icd_desc","ICD_desc","components_Tabs","Adjusted","LeadingSelector","AsianSubgroups","ICDSelector","styleLink","document","rel","head","appendChild","ReactDOM","render","components_App","querySelector"],"mappings":"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","file":"static/js/main.c1bc11d5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Tab extends Component {\n  static propTypes = {\n    activeTab: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired,\n  };\n\n  onClick = () => {\n    const { label, onClick } = this.props;\n    onClick(label);\n  }\n\n  render() {\n    const {\n      onClick,\n      props: {\n        activeTab,\n        label,\n      },\n    } = this;\n\n    let className = 'tab-list-item';\n\n    if (activeTab === label) {\n      className += ' tab-list-active';\n    }\n\n    return (\n      <li\n        className={className}\n        onClick={onClick}\n      >\n        {label}\n      </li>\n    );\n  }\n}\n\nexport default Tab;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Tab from './Tab';\n\nclass Tabs extends Component {\n  static propTypes = {\n    children: PropTypes.instanceOf(Array).isRequired,\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeTab: this.props.children[0].props.label,\n    };\n  }\n\n  onClickTabItem = (tab) => {\n    this.setState({ activeTab: tab });\n  }\n\n  render() {\n    const {\n      onClickTabItem,\n      props: {\n        children,\n      },\n      state: {\n        activeTab,\n      }\n    } = this;\n\n    return (\n      <div className=\"tabs\">\n        <ol className=\"tab-list\">\n          {children.map((child) => {\n            const { label } = child.props;\n\n            return (\n              <Tab\n                activeTab={activeTab}\n                key={label}\n                label={label}\n                onClick={onClickTabItem}\n              />\n            );\n          })}\n        </ol>\n        <div className=\"tab-content\">\n          {children.map((child) => {\n            if (child.props.label !== activeTab) return undefined;\n            return child.props.children;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Tabs;","import React from 'react';\nimport { Dropdown, Grid, Segment } from 'semantic-ui-react'\n\nclass DropdownOptions extends React.Component {\n  state = {}\n\n  handleChange = (e, { value }) => {\n    this.setState({ value });\n    this.props.getDropdownValue(value);\n  }\n\n  render() {\n    const { value } = this.state;\n    return (\n          <Dropdown\n            onChange={this.handleChange.bind(this)}\n            options={this.props.options}\n            placeholder='Choose an option'\n            selection\n            value={value}\n            fluid\n          />\n    )\n  }\n}\n\nexport default DropdownOptions;","import React from 'react';\nimport { Dropdown, Grid, Segment } from 'semantic-ui-react'\n\nclass DropdownOptions2 extends React.Component {\n  state = {}\n\n  handleChange = (e, { value }) => {\n    this.setState({ value });\n    this.props.getDropdownValue2(value);\n  }\n\n  render() {\n    const { value } = this.state;\n    return (\n\n          <Dropdown\n            onChange={this.handleChange.bind(this)}\n            options={this.props.options}\n            placeholder='Choose an option'\n            selection\n            value={value}\n            fluid\n          />   \n    )\n  }\n}\n\nexport default DropdownOptions2;","import React, {Component} from 'react'\nimport Chart from 'react-google-charts'\n\n\nclass ScatterChart extends Component {\n\n  render(){\n\n\n    return(\n\n      <Chart\n        // width={'900px'}\n        height={'500px'}\n        chartType=\"ScatterChart\"\n        loader={<div>Loading Chart</div>}\n        data={this.props.dataObjs}\n\n        options={{\n          title: this.props.y_var + ' versus ' + this.props.x_var,\n          titleTextStyle: {\n            color: 'black',    \n            // fontName: 'Times New Roman', \n            fontSize: 16, // 12, 18 (don't specify px)\n            bold: false,    \n            italic: false   \n          },\n          hAxis: { title: this.props.x_var },\n          vAxis: { title: this.props.y_var },\n          chartArea: { width: '60%', height: '80%'},\n          tooltip: { isHtml: true, trigger: \"visible\" },\n          // legend: 'none',\n          legend: {\n            textStyle: {color: 'black', fontSize: 12},\n            maxLines: 5\n          },\n          trendlines: this.props.display_trend && { \n            0: {\n              tooltip: false,\n              type: 'linear',\n              showR2: true,\n              visibleInLegend: true\n            }\n          },\n        }}\n        rootProps={{ 'data-testid': '1' }}\n      />\n\n\n    );\n  }\n}\n\nexport default ScatterChart","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport DropdownOptions from './DropdownOptions';\nimport DropdownOptions2 from './DropdownOptions2';\nimport ScatterChart from './ScatterChart';\nimport \"./style.css\";\nimport {Grid, Segment, Message, Header} from 'semantic-ui-react'\n\nconst API2 = 'https://sheets.googleapis.com/v4/spreadsheets/1Cwqkp0fNeizSnDqpmFbsPyn7z4auvaAiO_5G3tPv9bM/values:batchGet?ranges=export_counties&majorDimension=ROWS&key=AIzaSyB0CGGN8RdsTmZ2gqnuHDuik_lhuN6LxBY'\nconst API = 'https://sheets.googleapis.com/v4/spreadsheets/1epp9BjgaPSrHKh-PqIaD-mjB5nH6s19_Fz5Q8yx_Cl8/values:batchGet?ranges=export4&majorDimension=ROWS&key=AIzaSyB0CGGN8RdsTmZ2gqnuHDuik_lhuN6LxBY'\n\nconst VAR2_NAMES = [\n  \"geoid\",\n  \"place\",\n  \"Number of people below poverty level in the past 12 months (male)\",\n  \"Number of people who are foreign born\",\n  \"Number of people born in state of residence\",\n  \"Number of people below poverty level in the past 12 months (female)\",\n  \"Vacant housing unit\",\n  \"Number of people born in other state in the US\",\n  \"Deaths due to nervous system diseases\",\n  \"Deaths due to external causes\",\n  \"Number of Asians\",\n  \"Deaths due to neoplasm diseases\",\n  \"Number of Hispanic or Latinos\",\n  \"Number of Whites\",\n  \"Deaths due to circulatory system diseases\",\n  \"Number of Blacks or African Americans\"\n];\n\nconst VAR1_NAMES = [\n  \"geoid\",\n  \"place\",\n  \"Number of people with no schooling completed\",\n  \"Number of people with Master's Degree\",\n  \"Number of people with Doctorate Degree\",\n  \"Number of people with Associates Degree\",\n  \"Number of people with Bachelor's Degree\",\n  \"Number of Males\",\n  \"Number of Females\",\n  \"County Population\"\n];\n\nclass Correlation extends React.Component {\n\n  constructor(){\n    super();\n    this.state = {\n     items:[],\n     variables:[],\n     items2:[],\n     variables2:[],\n     option1: '',\n     option2: '',\n     plotData: [],\n     plotData2: [],\n     normalize: false,\n     dataReady: false  // load the scatterplot only when the data is ready\n    };\n\n  }\n\n   // The two for loops converts array of individual row arrays into an array of objects for each row\n  componentDidMount(){\n\n     fetch(API).then(response => response.json()).then(data => {\n      let batchRowValues = data.valueRanges[0].values;\n      batchRowValues[0] = VAR1_NAMES; // replace variable names\n      const rows = [];\n      for (let i = 1; i < batchRowValues.length; i++) {\n        let rowObject = {};\n        for (let j = 0; j < batchRowValues[i].length; j++) {\n          rowObject[batchRowValues[0][j]] = batchRowValues[i][j];\n\n        }\n        rows.push(rowObject);\n      }\n      const cols = [];\n      let colNameArray = data.valueRanges[0].values[0];\n      for (let i = 0; i < colNameArray.length; i++) {\n        if (colNameArray[i] !== 'geoid' && colNameArray[i] !== 'place') {  // Remove geoID and place from options\n          let colObject = {};\n          colObject['key'] = i.toString();\n          colObject['text'] = colNameArray[i]; \n          colObject['value'] = colNameArray[i];\n          cols.push(colObject);\n        } \n      }\n      this.setState({ \n        items: rows,\n        variables: cols\n      });\n    });\n\n     fetch(API2).then(response => response.json()).then(data => {\n      let batchRowValues = data.valueRanges[0].values;\n      batchRowValues[0] = VAR2_NAMES; \n      const rows = [];\n      for (let i = 1; i < batchRowValues.length; i++) {\n        let rowObject = {};\n        for (let j = 0; j < batchRowValues[i].length; j++) {\n          rowObject[batchRowValues[0][j]] = batchRowValues[i][j];\n        }\n        rows.push(rowObject);\n      }\n      const cols = [];\n      let colNameArray = data.valueRanges[0].values[0];\n      for (let i = 0; i < colNameArray.length; i++) {\n        if (colNameArray[i] !== 'geoid' && colNameArray[i] !== 'place') {  // Remove geoID and place from options\n          let colObject = {};\n          colObject['key'] = i.toString();\n          colObject['text'] = colNameArray[i];\n          colObject['value'] = colNameArray[i];\n          cols.push(colObject);\n        } \n      }\n      this.setState({ \n        items2: rows,\n        variables2: cols\n      });\n    });\n\n  }\n\n  populateArray() {\n    let var1 = this.state.option1;\n    let var2 = this.state.option2;\n    let plotDataTemp = [];\n    plotDataTemp.push([var1, var2, { role: \"tooltip\", type: \"string\", p: { html: true } } ]);\n    \n    if (var1 !== '' && var2 !== '') {\n      let sheet1 = this.state.items;\n      let sheet2 = this.state.items2;\n\n      for (let i = 0; i < sheet1.length; i++) {\n        let pairArray = [];\n        let num1 = sheet1[i][var1];\n        let num2 = 0;\n\n        if (sheet1[i][var1]!== \"\") {\n          pairArray.splice(0, 0, parseInt(sheet1[i][var1]));\n        }\n        \n        for (let j = 0; j < sheet2.length; j++) {  // i = j bc the two spreadsheets have the same counties on each row\n          if (sheet2[j]['geoid'] === sheet1[i]['geoid']) {\n            num2 = sheet2[j][var2];\n            if (sheet2[j][var2]!== \"\") {\n              pairArray.splice(1, 0, parseInt(sheet2[j][var2]));\n            }\n            break;\n          }\n        }\n        if (pairArray.length > 1) {\n          pairArray.splice(2, 0, sheet2[i]['place'] + \", (\" + num1 + \", \" + num2 + \")\"); // this is for the tooltip\n          plotDataTemp.push(pairArray);\n        }\n        \n      }\n    }\n    this.setState(\n        { plotData: plotDataTemp, dataReady: true }\n    );   \n  }\n\n  getDropdownValue = value => {\n    this.setState(\n        { option1: value }, \n        function () {\n          if (this.state.option1 !== \"\" && this.state.option2 !== \"\") {\n            this.populateArray();\n          }\n        }\n    );\n  }\n\n  getDropdownValue2 = value => {\n    this.setState(\n        { option2: value }, \n        function () {\n          if (this.state.option1 !== \"\" && this.state.option2 !== \"\") {\n            this.populateArray();\n          }\n        }\n    );\n  }\n\n  render() {\n\n    return (\n      <div className='body-container'>\n      \n        <Grid centered columns={1}>\n          <Grid.Column>\n\n            <Segment>\n              <div className='scatter-plot'>\n                {this.state.dataReady && <ScatterChart \n                  dataObjs={this.state.plotData}\n                  x_var={this.state.option1}\n                  y_var={this.state.option2}\n                  display_trend={true} \n                />}\n                {!this.state.dataReady && \n                  <div className='welcome'>\n                    <Message>\n                      <Message.Header>Welcome to the US Counties Correlation Explorer</Message.Header>\n                      <p>\n                        Select two variables from the options below to see their correlation.\n                      </p>\n                    </Message>\n                  </div>\n                }\n              </div>\n            </Segment>\n\n            <div className=\"drop-down\">\n              <DropdownOptions\n                options={this.state.variables}\n                getDropdownValue={this.getDropdownValue.bind(this)}\n              />\n            </div>\n\n            <div className=\"drop-down\">\n              <DropdownOptions2\n                options={this.state.variables2}\n                getDropdownValue2={this.getDropdownValue2.bind(this)}\n              />\n            </div>\n          </Grid.Column>\n        </Grid>\n\n      </div>\n    );\n  }\n}  \n\nexport default Correlation;\n\n\n\n\n\n\n\n\n","\nimport React, {Component} from 'react'\nimport Chart from 'react-google-charts'\nimport {Segment} from 'semantic-ui-react'\n\n\n\nclass CauseGraph extends Component {\n\n  \n\n  render(){\n\n\n    return(\n\n      <Segment basic>\n\n      <Chart\n        // width={700}\n        height='80%'\n        chartType=\"ColumnChart\"\n        loader={<div>Loading Chart</div>}\n        data={this.props.yearData}\n        options={{\n          title: this.props.subgroupNames,\n          chartArea: {top: 20, width: this.props.width },\n          colors: this.props.colors,\n          // hAxis: {\n          //   title: 'Total Population',\n          //   minValue: 0,\n          // },\n          // vAxis: {\n          //   title: 'Count / 100,000',\n          // },\n          legend: 'none'\n        }}\n        legendToggle\n      />\n\n      </Segment>\n\n    );\n  }\n}\n\nexport default CauseGraph;\n\n\n\n\n\n\n\n// constructor(){\n//     super();\n//     this.state = {\n//       yearData: [\n//           ['Cause of death', 'Male', 'Female'],\n//           ['Heart disease', 8175000, 8008000],\n//           ['Malignant Neoplasms', 3792000, 3694000],\n//           ['Cerebralvascular Diseases', 2695000, 2896000],\n//           ['Chronic lower respiratory diseases', 2099000, 1953000],\n//           [\"Alzheimer's disease\", 1526000, 1517000],\n//       ],\n//       subgroup: 'Korean'\n\n//     };\n\n//   }\n  \n//   render() {\n\n//     return (\n//       <div>\n//         <Grid columns={3} stackable>\n\n//         <Grid.Row>\n\n\n//           <Grid.Column>\n//             <CauseSubgroups\n//               yearData={this.state.yearData}\n//               colors={['#0033cc', '#809fff']}\n//               width='100%'\n//               subgroup='Asian Indian'\n//             />\n//           </Grid.Column>\n          \n//           <Grid.Column>\n//             <TemporalSubgroup\n//               yearData={this.state.yearData}\n//               colors={['#009933', '#4dff4d']}\n//               width='100%'\n//               subgroup='Chinese'\n//             />\n//           </Grid.Column>\n\n//           <Grid.Column>\n//             <TemporalSubgroup\n//               yearData={this.state.yearData}\n//               colors={['#990099', '#ff4dff']}\n//               width='100%'\n//               subgroup='Filipino'\n//             />\n//           </Grid.Column>\n\n//           <Grid.Column>\n//             <TemporalSubgroup\n//               yearData={this.state.yearData}\n//               colors={['#ff9933', '#ffcc99']}\n//               width='100%'\n//               subgroup='Japanese'\n//             />\n//           </Grid.Column>\n\n//           <Grid.Column>\n//             <TemporalSubgroup\n//               yearData={this.state.yearData}\n//               colors={['#ffff00', '#fff0b3']}\n//               width='100%'\n//               subgroup={this.state.subgroup}\n//             />\n//           </Grid.Column>\n\n//           <Grid.Column>\n//             <TemporalSubgroup\n//               yearData={this.state.yearData}\n//               colors={['#996633', '#c68c53']}\n//               width='100%'\n//               subgroup='Vietnamese'\n//             />\n//           </Grid.Column>\n\n//         </Grid.Row>\n\n//       </Grid>\n\n//       </div>\n//     );\n//   }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Chart from 'react-google-charts'\n\nimport \"./style.css\";\nimport {Grid, Segment, Message, Header, Divider} from 'semantic-ui-react'\n\nimport CauseGraph from './CauseGraph';\n\n// {this.state.dataReady && <ScatterChart \n//                   dataObjs={this.state.plotData}\n//                   x_var={this.state.option1}\n//                   y_var={this.state.option2}\n//                   display_trend={true} \n//                 />}\n\nconst colors = [['#0033cc', '#809fff'], ['#009933', '#4dff4d'],['#990099', '#ff4dff'],\n['#ff9933', '#ffcc99'],['#ffff00', '#fff0b3'],['#996633', '#c68c53'], ['#ff0000', '#ff9999'],\n['#33bbff', '#b3e6ff'], ['#99ff99', '#ccffcc'], ['#ff80bf', '#ffcce6'], ['#ffc34d', '#ffe6b3'], ['#666699', '#c2c2d6']]\n\nclass Temporal extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      icdData: this.props.icd,  // icdData should contain the [Year, M, F] for every subgroup of this one disease\n      icdHeader: this.props.diseaseName,\n      subgroupNames: this.props.subgroupNames // should be the subgroups only for a particular disease\n    };\n\n  }\n\n  render() {\n\n    return (\n      <div>\n        <Grid columns={2} stackable> \n\n        <Grid.Row>\n\n          {this.props.icd.map((icd, idx) => (  // each icd is a year w/ info about the 6 groups\n            <div key={idx}>\n                 <Grid.Column>\n                    <CauseGraph\n                      yearData={icd}\n                      colors={colors[idx]}\n                      width='70%'\n                      subgroupNames={this.props.subgroupNames[idx]}\n                    />\n                  </Grid.Column>\n            </div>\n          ))}\n        </Grid.Row>\n\n      </Grid>        \n\n      </div>\n    );\n  }\n}  \n\nexport default Temporal;\n\n// <Grid.Column>\n//             <CauseGraph\n//               icdData={this.state.icdData[0]}\n//               colors={['#0033cc', '#809fff']}\n//               width='100%'\n//               subgroup='Asian Indian'\n//             />\n//           </Grid.Column>\n          \n//           <Grid.Column>\n//             <CauseGraph\n//               icdData={this.state.icdData[1]}\n//               colors={['#009933', '#4dff4d']}\n//               width='100%'\n//               subgroup='Chinese'\n//             />\n//           </Grid.Column>\n\n//           <Grid.Column>\n//             <CauseGraph\n//               icdData={this.state.icdData[2]}\n//               colors={['#990099', '#ff4dff']}\n//               width='100%'\n//               subgroup='Filipino'\n//             />\n//           </Grid.Column>\n\n//           <Grid.Column>\n//             <CauseGraph\n//               icdData={this.state.icdData[3]}\n//               colors={['#ff9933', '#ffcc99']}\n//               width='100%'\n//               subgroup='Japanese'\n//             />\n//           </Grid.Column>\n\n//           <Grid.Column>\n//             <CauseGraph\n//               icdData={this.state.icdData[4]}\n//               colors={['#ffff00', '#fff0b3']}\n//               width='100%'\n//               subgroup='Korean'\n//             />\n//           </Grid.Column>\n\n//           <Grid.Column>\n//             <CauseGraph\n//               icdData={this.state.icdData[5]}\n//               colors={['#996633', '#c68c53']}\n//               width='100%'\n//               subgroup='Vietnamese'\n//             />\n//           </Grid.Column>\n\n // <Grid.Column width={4}>\n          //   <Segment basic>\n          //     <Chart\n          //       height='80%'\n          //       chartType=\"ColumnChart\"\n          //       loader={<div>Loading Chart</div>}\n          //       data={this.state.icdData}\n          //       options={{\n          //         title: 'Aggregate',\n          //         chartArea: { left:80, top: 21, bottom: 40, width: '50%' },\n          //         colors: ['#ff0000', '#ff8080'],\n          //         legend: 'none'\n          //       }}\n          //       legendToggle\n          //     />\n          //   </Segment>\n          // </Grid.Column>\n\n\n\n\n","import React, {Component} from 'react'\nimport Chart from 'react-google-charts'\nimport {Segment, Grid, Divider} from 'semantic-ui-react'\nimport CauseGraph from './CauseGraph';\n\n// Asian Indian0: (3) [\"Diseases of the heart\", \"310\", \"537\"]\n// Asian Indian1: (3) [\"Malignant neoplasms\", \"219\", \"244\"]\n// Asian Indian2: (3) [\"Accidents (unintentional injuries\", \"46\", \"91\"]\n\n// for each key, through away the number at the end, put the arrays in an array\n// subgroupData = [\n//      [ [], [], [] ],  <-- this is the indian array\n//      [ [], [], [] ],  <-- this is the chinese array\n// ]\n\nclass CauseSubgroups extends Component {\n\n\n  render(){\n\n    return (\n      <div>\n        <Grid columns={2} stackable>\n\n        <Grid.Row>\n\n\n\n          <Grid.Column>\n            <CauseGraph\n              yearData={this.props.year[0]}\n              colors={['#0033cc', '#809fff']}\n              width='80%'\n              subgroup='Asian Indian'\n            />\n          </Grid.Column>\n          \n          <Grid.Column>\n            <CauseGraph\n              yearData={this.props.year[1]}\n              colors={['#009933', '#4dff4d']}\n              width='80%'\n              subgroup='Chinese'\n            />\n          </Grid.Column>\n\n          <Grid.Column>\n            <CauseGraph\n              yearData={this.props.year[2]}\n              colors={['#990099', '#ff4dff']}\n              width='80%'\n              subgroup='Filipino'\n            />\n          </Grid.Column>\n\n          <Grid.Column>\n            <CauseGraph\n              yearData={this.props.year[3]}\n              colors={['#ff9933', '#ffcc99']}\n              width='80%'\n              subgroup='Japanese'\n            />\n          </Grid.Column>\n\n          <Grid.Column>\n            <CauseGraph\n              yearData={this.props.year[4]}\n              colors={['#ffff00', '#fff0b3']}\n              width='80%'\n              subgroup='Korean'\n            />\n          </Grid.Column>\n\n          <Grid.Column>\n            <CauseGraph\n              yearData={this.props.year[5]}\n              colors={['#996633', '#c68c53']}\n              width='80%'\n              subgroup='Vietnamese'\n            />\n          </Grid.Column>\n\n        </Grid.Row>\n\n      </Grid>\n\n      </div>\n    );\n  }\n}\n\nexport default CauseSubgroups;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Chart from 'react-google-charts'\n\nimport \"./style.css\";\nimport {Grid, Segment, Message, Header, Divider} from 'semantic-ui-react';\n\nimport CauseSubgroups from './CauseSubgroups';\n\n// {this.state.dataReady && <ScatterChart \n//                   dataObjs={this.state.plotData}\n//                   x_var={this.state.option1}\n//                   y_var={this.state.option2}\n//                   display_trend={true} \n//                 />}\n\n\nconst API = 'https://sheets.googleapis.com/v4/spreadsheets/1OzxxKz0C9VIttmeyflarMIupjhy6mKfJEslapL_uDq4/values:batchGet?ranges=df_cause&majorDimension=ROWS&key=AIzaSyB0CGGN8RdsTmZ2gqnuHDuik_lhuN6LxBY'\n\nclass CauseYears extends React.Component {\n\n  constructor(){\n    super();\n    this.state = {\n      yr: [\"2003\", \"2004\", \"2005\",\"2006\", \"2007\", \"2008\",\"2009\", \"2010\", \"2011\",\"2012\", \"2013\", \"2014\",\"2015\",\"2016\",\"2017\"],\n     items:[],\n     yearData: [], // don't need an obj explicitly saying 2003: ... 2004 ... the index is fine\n     dataReady: false\n    }; \n  }\n\n\n\n  componentDidMount(){\n   fetch(API).then(response => response.json()).then(data => {\n    let batchRowValues = data.valueRanges[0].values;\n    const rows = [];\n    for (let i = 1; i < batchRowValues.length; i++) {\n      let rowObject = {};\n      for (let j = 0; j < batchRowValues[i].length; j++) {\n        rowObject[batchRowValues[0][j]] = batchRowValues[i][j];\n      }\n      rows.push(rowObject);\n    }\n      this.setState({ items: rows });\n      // console.log(this.state.items);\n\n      // Shape the array\n\n\n      var currYear = this.state.items[0].Year;\n      var yearContents = [];\n\n      var yearDataTmp = []; // used to set state\n\n      var currGroup = this.state.items[0].Subgroup\n      var groupContents = [['Cause of death', 'Male', 'Female']];\n\n      for (let i = 0; i < this.state.items.length; i++) {\n        let item = this.state.items[i];\n\n        if (item.Year == currYear) {\n\n          if (item.Subgroup == currGroup) {\n            groupContents.push([item.Cause_of_death, parseInt(item.Male), parseInt(item.Female)]);\n          } else {\n            yearContents.push(groupContents);\n            groupContents = [['Cause of death', 'Male', 'Female']];\n            currGroup = item.Subgroup;\n            groupContents.push([item.Cause_of_death, parseInt(item.Male), parseInt(item.Female)]);\n          }\n          \n        } else {\n\n          console.log(\"!=currYear: \", currYear);\n          yearDataTmp.push(yearContents); \n          yearContents = [];\n          currYear = item.Year;\n          // yearContents[\"subGroup\"] = item.Subgroup;\n          // yearContents.push([item.Cause_of_death, item.Male, item.Female]);\n          if (item.Subgroup == currGroup) {\n            groupContents.push([item.Cause_of_death, parseInt(item.Male), parseInt(item.Female)]);\n          } else {\n            yearContents.push(groupContents);\n            groupContents = [['Cause of death', 'Male', 'Female']];\n            currGroup = item.Subgroup;\n            groupContents.push([item.Cause_of_death, parseInt(item.Male), parseInt(item.Female)]);\n          }\n\n        }\n        \n        \n      }\n\n      yearDataTmp.push(yearContents); \n      console.log(yearDataTmp.length);\n      this.setState({ \n        yearData: yearDataTmp, \n        dataReady: true \n      });  \n\n      console.log(this.state.yearData);\n      \n    });\n  }\n\n\n  // Now render the Subgroups for 2003 and 2004\n  // Then in those subgroups, remove the number from the end \n  // In the subgroup, generate an array of array of data\n\n  render() {\n    return (\n      <div>\n         {this.state.dataReady && this.state.yearData.map( (year,idx) => (\n            <div>\n              <Header as='h3'>{this.state.yr[idx]}</Header>\n              <CauseSubgroups\n                year={year}\n              />\n              <Divider section />\n            </div>\n         ))}\n      </div>\n  ); }\n\n  \n}  \n\nexport default CauseYears;\n\n\n\n\n","import React, {Component} from 'react'\nimport Chart from 'react-google-charts'\nimport {Segment, Grid, Divider} from 'semantic-ui-react'\nimport CauseGraph from './CauseGraph';\n\n// Asian Indian0: (3) [\"Diseases of the heart\", \"310\", \"537\"]\n// Asian Indian1: (3) [\"Malignant neoplasms\", \"219\", \"244\"]\n// Asian Indian2: (3) [\"Accidents (unintentional injuries\", \"46\", \"91\"]\n\n// for each key, through away the number at the end, put the arrays in an array\n// subgroupData = [\n//      [ [], [], [] ],  <-- this is the indian array\n//      [ [], [], [] ],  <-- this is the chinese array\n// ]\n\nclass TempSubgroups extends Component {\n\n\n  render(){\n\n    return (\n      <div>\n        <Grid columns={7} stackable>\n\n        <Grid.Row>\n\n\n\n          <Grid.Column>\n            <CauseGraph\n              yearData={this.props.disease[0]}\n              colors={['#0033cc', '#809fff']}\n              width='80%'\n              subgroup='Asian Indian'\n            />\n          </Grid.Column>\n          \n          <Grid.Column>\n            <CauseGraph\n              yearData={this.disease.disease[1]}\n              colors={['#009933', '#4dff4d']}\n              width='80%'\n              subgroup='Chinese'\n            />\n          </Grid.Column>\n\n          <Grid.Column>\n            <CauseGraph\n              yearData={this.props.disease[0]}\n              colors={['#990099', '#ff4dff']}\n              width='80%'\n              subgroup='Filipino'\n            />\n          </Grid.Column>\n\n          <Grid.Column>\n            <CauseGraph\n              yearData={this.props.disease[0]}\n              colors={['#ff9933', '#ffcc99']}\n              width='80%'\n              subgroup='Japanese'\n            />\n          </Grid.Column>\n\n          <Grid.Column>\n            <CauseGraph\n              yearData={this.props.disease[0]}\n              colors={['#ffff00', '#fff0b3']}\n              width='80%'\n              subgroup='Korean'\n            />\n          </Grid.Column>\n\n          <Grid.Column>\n            <CauseGraph\n              yearData={this.props.disease[0]}\n              colors={['#996633', '#c68c53']}\n              width='80%'\n              subgroup='Vietnamese'\n            />\n          </Grid.Column>\n\n        </Grid.Row>\n\n      </Grid>\n\n      </div>\n    );\n  }\n}\n\nexport default TempSubgroups;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Chart from 'react-google-charts'\n\nimport \"./style.css\";\nimport {Grid, Segment, Message, Header, Divider} from 'semantic-ui-react';\n\nimport TempSubgroups from './TempSubgroups';\n\n// {this.state.dataReady && <ScatterChart \n//                   dataObjs={this.state.plotData}\n//                   x_var={this.state.option1}\n//                   y_var={this.state.option2}\n//                   display_trend={true} \n//                 />}\n\n\nconst API = 'https://sheets.googleapis.com/v4/spreadsheets/1KWVIwvvWhrpAR-c-TihN_G1Wqws3Z-VDhgsn1nUdOHY/values:batchGet?ranges=df_cause&majorDimension=ROWS&key=AIzaSyB0CGGN8RdsTmZ2gqnuHDuik_lhuN6LxBY'\n\nclass TempDisease extends React.Component {\n\n  constructor(){\n    super();\n    this.state = {\n      // yr: [\"2003\", \"2004\", \"2005\",\"2006\", \"2007\", \"2008\",\"2009\", \"2010\", \"2011\",\"2012\", \"2013\", \"2014\",\"2015\",\"2016\",\"2017\"],\n      // items:[],\n      // yearData: [], // don't need an obj explicitly saying 2003: ... 2004 ... the index is fine\n\n      disease: [\"Accidents (unintentional injuries\", \"Alzheimer's diseases\", \"Cerebrovascular diseases\", \n      \"Chronic liver disease and cirrhosis\", \"Diabetes mellitus\", \"Diseases of the heart\", \"Influenza and pneumonia\",\n      \"Intentional self-harm (suicide)\", \"Malignant neoplasms\", \"Nephritis, nephrotic syndrome and nephrosis\", \"Septicemia\"],\n      items:[],\n      diseaseData: [],\n\n      dataReady: false\n\n    }; \n  }\n\n\n\n  componentDidMount(){\n   fetch(API).then(response => response.json()).then(data => {\n    let batchRowValues = data.valueRanges[0].values;\n    const rows = [];\n    for (let i = 1; i < batchRowValues.length; i++) {\n      let rowObject = {};\n      for (let j = 0; j < batchRowValues[i].length; j++) {\n        rowObject[batchRowValues[0][j]] = batchRowValues[i][j];\n      }\n      rows.push(rowObject);\n    }\n      this.setState({ items: rows });\n      // console.log(this.state.items);\n\n      // Shape the array\n\n      var currDisease = \"Diseases of the heart\";\n      var diseaseContents = [];\n\n      var diseaseDataTmp = []; // used to set state\n\n      var currGroup = \"Asian Indian\"\n      var groupContents = [['Year', 'Male', 'Female']];\n\n      for (let i = 0; i < this.state.items.length; i++) {\n        let item = this.state.items[i];\n\n        if (item.Cause_of_death == currDisease) {\n          if (item.Subgroup == currGroup) {\n            groupContents.push([item.Year, parseInt(item.Male), parseInt(item.Female)]);\n          } else {\n            diseaseContents.push(groupContents);\n            groupContents = [['Year', 'Male', 'Female']];\n            currGroup = item.Subgroup;\n            groupContents.push([item.Year, parseInt(item.Male), parseInt(item.Female)]);\n          }\n          \n        } else {\n\n          diseaseDataTmp.push(diseaseContents); \n          diseaseContents = [];\n          currDisease = item.Cause_of_death;\n          // yearContents[\"subGroup\"] = item.Subgroup;\n          // yearContents.push([item.Cause_of_death, item.Male, item.Female]);\n          if (item.Subgroup == currGroup) {\n            groupContents.push([item.Year, parseInt(item.Male), parseInt(item.Female)]);\n          } else {\n            diseaseContents.push(groupContents);\n            groupContents = [['Cause of death', 'Male', 'Female']];\n            currGroup = item.Subgroup;\n            groupContents.push([item.Year, parseInt(item.Male), parseInt(item.Female)]);\n          }\n\n        }\n\n      }\n\n      console.log(\"diseaseDataTmp: \", diseaseDataTmp);\n\n      diseaseDataTmp.push(diseaseContents); \n      this.setState({ \n        diseaseData: diseaseDataTmp, \n        dataReady: true \n      });  \n      \n    });\n  }\n\n\n  // Now render the Subgroups for 2003 and 2004\n  // Then in those subgroups, remove the number from the end \n  // In the subgroup, generate an array of array of data\n\n  render() {\n    return (\n      <div>\n         {this.state.dataReady && this.state.diseaseData.map( (disease,idx) => (\n            <div>\n              <Header as='h3'>{this.state.disease[idx]}</Header>\n\n              <Divider section />\n            </div>\n         ))}\n      </div>\n  ); }\n\n  \n}  \n\nexport default TempDisease;\n\n                // <TempSubgroups\n                //   disease={disease}\n                // />\n\n\n","import _ from 'lodash'\nimport React, { Component } from 'react'\nimport { Table } from 'semantic-ui-react'\n\nconst tableData = [\n  { Cause: 'Heart disease', gender: 'M', Count: 15  },\n  { Cause: 'tuberculosis', gender: 'F', Count: 40  },\n  { Cause: 'malignant', gender: 'F', Count: 25 },\n  { Cause: 'parasitic infection', gender: 'M', Count: 70 },\n]\n\n\nexport default class TableExampleSortable extends Component {\n  state = {\n    column: null,\n    data: this.props.year,\n    direction: null,\n  }\n\n  handleSort = clickedColumn => () => {\n    const { column, data, direction } = this.state\n\n    if (column !== clickedColumn) {\n      this.setState({\n        column: clickedColumn,\n        data: _.sortBy(data, [clickedColumn]),\n        direction: 'ascending',\n      })\n\n      return\n    }\n\n    this.setState({\n      data: data.reverse(),\n      direction: direction === 'ascending' ? 'descending' : 'ascending',\n    })\n  }\n\n  render() {\n    const { column, data, direction } = this.state\n\n    return (\n      <Table sortable celled fixed compact size=\"small\">\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell\n              sorted={column === 'Cause' ? direction : null}\n              onClick={this.handleSort('Cause')}\n            >\n              Cause \n            </Table.HeaderCell>\n            \n            <Table.HeaderCell\n              sorted={column === 'gender' ? direction : null}\n              onClick={this.handleSort('gender')}\n              width=\"five\"\n            >\n              Gender\n            </Table.HeaderCell>\n\n            <Table.HeaderCell\n              sorted={column === 'Count' ? direction : null}\n              onClick={this.handleSort('Count')}\n              width=\"four\"\n            >\n              Count\n            </Table.HeaderCell>\n\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {_.map(data, ({ Count, gender, Cause }, idx) => (\n            <Table.Row key={idx}>\n              <Table.Cell>{Cause}</Table.Cell>\n              <Table.Cell>{gender}</Table.Cell>\n              <Table.Cell>{Count}</Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    )\n  }\n}\n","import React from 'react'\nimport { Grid, Image, Segment, Header } from 'semantic-ui-react'\nimport SortableTable from './SortableTable';\n\n// Each table is for a subgroup\nconst yrs = [\"2003\", \"2004\", \"2005\",\"2006\", \"2007\", \"2008\",\"2009\", \"2010\", \"2011\",\"2012\", \"2013\", \"2014\",\"2015\",\"2016\",\"2017\"];\n\n\nconst TableGrid = (props) => (\n  <Grid columns={5}>\n    {props.group.map((year, idx) => (\n\n      <Grid.Column key={idx}>\n        <Segment basic>\n          <Header as='h3' textAlign='center' color='grey'>\n            {yrs[idx]}\n          </Header>\n          <SortableTable \n            year={year}\n          />\n        </Segment>\n      </Grid.Column>\n\n    ))}\n\n  </Grid>\n)\n\nexport default TableGrid;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Chart from 'react-google-charts'\n\nimport \"./style.css\";\nimport {Grid, Segment, Message, Header, Divider} from 'semantic-ui-react';\nimport TableGrid from './TableGrid';\n\n\n// {this.state.dataReady && <ScatterChart \n//                   dataObjs={this.state.plotData}\n//                   x_var={this.state.option1}\n//                   y_var={this.state.option2}\n//                   display_trend={true} \n//                 />}\n\n// const tableData = [\n//   { Cause: 'Heart disease', gender: 'M', Count: 15  },\n//   { Cause: 'tuberculosis', gender: 'F', Count: 40  },\n//   { Cause: 'malignant', gender: 'F', Count: 25 },\n//   { Cause: 'parasitic infection', gender: 'M', Count: 70 },\n// ]\n\n// ICD_Code: \"A02\"\n// Sex: \"F\"\n// Subgroup_race: \"White\"\n// Year_death: \"2003\"\n// total.count: \"14\"\n\n\nconst API = 'https://sheets.googleapis.com/v4/spreadsheets/1qzrBqwxbhnq7ctW7zMlZ_tL-ACWLdnOuFn4VcyNlTYU/values:batchGet?ranges=sheet1&majorDimension=ROWS&key=AIzaSyB0CGGN8RdsTmZ2gqnuHDuik_lhuN6LxBY'\n\nconst asian_subgroup = [\"Asian Indian\", \"Chinese\", \"Filipino\", \"Japanese\", \"Korean\", \"Vietnamese\"];\n\n\nclass SubgroupTables extends React.Component {\n\n  constructor(){\n    super();\n    this.state = {\n      yr: [\"2003\", \"2004\", \"2005\",\"2006\", \"2007\", \"2008\",\"2009\", \"2010\", \"2011\",\"2012\", \"2013\", \"2014\",\"2015\",\"2016\",\"2017\"],\n     items:[],\n     subgroupData: [], // don't need an obj explicitly saying 2003: ... 2004 ... the index is fine\n     dataReady: false\n    }; \n  }\n\n\n\n  componentDidMount(){\n   fetch(API).then(response => response.json()).then(data => {\n    let batchRowValues = data.valueRanges[0].values;\n    const rows = [];\n    for (let i = 1; i < batchRowValues.length; i++) {\n      let rowObject = {};\n      for (let j = 0; j < batchRowValues[i].length; j++) {\n        rowObject[batchRowValues[0][j]] = batchRowValues[i][j];\n      }\n      rows.push(rowObject);\n    }\n      this.setState({ items: rows });\n      // console.log(this.state.items);\n\n      // Shape the array\n\n      var subgroupContents = [];\n\n      var subgroupDataTmp = []; // used to set state\n\n      var groupContents = [];\n\n      var currYear = this.state.items[0].Year_death;\n      var currGroup = this.state.items[0].Subgroup_race;\n      \n\n      for (let i = 0; i < this.state.items.length; i++) {\n        let item = this.state.items[i];\n\n        if (item.Subgroup_race === currGroup) {\n          \n          if (item.Year_death === currYear) {\n            groupContents.push( {Cause: item.ICD_Code, gender: item.Sex, Count: parseInt(item.total_count)} );\n\n          } else {\n            // console.log(\"Same subgroup \", item.Subgroup_race, \" but different year \", item.Year_death);\n            subgroupContents.push(groupContents); // saves a year's data\n            groupContents = [];\n            currYear = item.Year_death;\n            groupContents.push( {Cause: item.ICD_Code, gender: item.Sex, Count: parseInt(item.total_count)} );\n\n          }\n          \n        } else {\n          currYear = item.Year_death;\n          currGroup = item.Subgroup_race;\n          \n          // console.log(\"Curryear: \", currYear, \" | currGroup: \", currGroup);\n          // console.log(\"subgroupContents.length: \", subgroupContents.length);\n          subgroupContents.push(groupContents); // its a new subgroup, so save the last year from the previous subgroup\n          subgroupDataTmp.push(subgroupContents); // saves a subgroup's data\n          \n          subgroupContents = [];\n          groupContents = [];\n          groupContents.push( {Cause: item.ICD_Code, gender: item.Sex, Count: parseInt(item.total_count)} );\n\n        }\n        \n      }\n\n      subgroupContents.push(groupContents); // save the previous subgroup\n      subgroupDataTmp.push(subgroupContents);\n\n\n      this.setState({ \n        subgroupData: subgroupDataTmp, \n        dataReady: true \n      });  \n\n      if (this.state.dataReady) {\n        console.log(\"subgroupData: \", this.state.subgroupData);\n      }\n      \n      \n    });\n  }\n\n\n\n  // Now render the Subgroups for 2003 and 2004\n  // Then in those subgroups, remove the number from the end \n  // In the subgroup, generate an array of array of data\n\n  render() {\n    return (\n      <div>\n        <div> \n          <a href=\"https://docs.google.com/spreadsheets/d/1hdtsYfl2WSAFCGwF1KISL6SchL1y6YSp5Y07nyYFLWQ/edit#gid=331576585\" target=\"_blank\">Link to data</a>\n          \n        </div>\n         {this.state.dataReady && this.state.subgroupData.map((group, idx) => (\n            <div key={idx}>\n                <Divider horizontal>{asian_subgroup[idx]}</Divider>\n                <TableGrid \n                  group={group}\n                />\n            </div>\n         ))}\n      </div>\n    ); \n  }\n\n  \n}  \n\nexport default SubgroupTables;\n\n              // <CauseSubgroups\n              //   year={year}\n              // />\n\n\n","import React from 'react'\nimport { Dropdown, Grid, Form } from 'semantic-ui-react'\n\nconst o = [\n  { key: 'angular', text: 'Angular', value: 'angular' },\n  { key: 'css', text: 'CSS', value: 'css' },\n  { key: 'design', text: 'Graphic Design', value: 'design' },\n  { key: 'ember', text: 'Ember', value: 'ember' },\n  { key: 'html', text: 'HTML', value: 'html' },\n  { key: 'ia', text: 'Information Architecture', value: 'ia' },\n  { key: 'javascript', text: 'Javascript', value: 'javascript' },\n  { key: 'mech', text: 'Mechanical Engineering', value: 'mech' },\n  { key: 'meteor', text: 'Meteor', value: 'meteor' },\n  { key: 'node', text: 'NodeJS', value: 'node' },\n  { key: 'plumbing', text: 'Plumbing', value: 'plumbing' },\n  { key: 'python', text: 'Python', value: 'python' },\n  { key: 'rails', text: 'Rails', value: 'rails' },\n  { key: 'react', text: 'React', value: 'react' },\n  { key: 'repair', text: 'Kitchen Repair', value: 'repair' },\n  { key: 'ruby', text: 'Ruby', value: 'ruby' },\n  { key: 'ui', text: 'UI Design', value: 'ui' },\n  { key: 'ux', text: 'User Experience', value: 'ux' },\n]\n\n// props.icd.forEach(item => console.log(item));\n\n\n\nexport default class DropdownExampleSelectOnNavigation extends React.Component {\n\n\n  constructor(props){\n    super(props);\n    this.state = {\n      default: '',\n      options1: 3\n    };\n\n  }\n\n  handleChange = (e, { name, value }) => {\n    this.setState({ [name]: value });\n    console.log(\"icdDropDown value: \", value);\n    this.props.getDropdownValue(value);\n  }\n\n  render() {\n    return (\n      <Grid columns='equal'>\n        <Grid.Column>\n          <Form>\n            <Form.Field>\n              <label>Default selectOnNavigation</label>\n              <Dropdown\n                selection\n                name='default'\n                options={this.props.icdDropOptions}\n                onChange={this.handleChange.bind(this)}\n                placeholder='Skills' \n                fluid multiple selection \n              />\n            </Form.Field>\n          </Form>\n        </Grid.Column>\n        <Grid.Column>\n          Dropdown values:\n          <pre>{JSON.stringify(this.state, null, 2)}</pre>\n        </Grid.Column>\n      </Grid>\n    )\n  }\n}","import React from 'react'\nimport { Dropdown, Grid, Form } from 'semantic-ui-react'\n\nconst o = [\n  { key: 'angular', text: 'Angular', value: 'angular' },\n  { key: 'css', text: 'CSS', value: 'css' },\n  { key: 'design', text: 'Graphic Design', value: 'design' },\n  { key: 'ember', text: 'Ember', value: 'ember' },\n  { key: 'html', text: 'HTML', value: 'html' },\n  { key: 'ia', text: 'Information Architecture', value: 'ia' },\n  { key: 'javascript', text: 'Javascript', value: 'javascript' },\n  { key: 'mech', text: 'Mechanical Engineering', value: 'mech' },\n  { key: 'meteor', text: 'Meteor', value: 'meteor' },\n  { key: 'node', text: 'NodeJS', value: 'node' },\n  { key: 'plumbing', text: 'Plumbing', value: 'plumbing' },\n  { key: 'python', text: 'Python', value: 'python' },\n  { key: 'rails', text: 'Rails', value: 'rails' },\n  { key: 'react', text: 'React', value: 'react' },\n  { key: 'repair', text: 'Kitchen Repair', value: 'repair' },\n  { key: 'ruby', text: 'Ruby', value: 'ruby' },\n  { key: 'ui', text: 'UI Design', value: 'ui' },\n  { key: 'ux', text: 'User Experience', value: 'ux' },\n]\n\n// props.icd.forEach(item => console.log(item));\n\n\n\nexport default class DropdownExampleSelectOnNavigation extends React.Component {\n\n\n  constructor(props){\n    super(props);\n    this.state = {\n      default: '',\n      options1: 3\n    };\n\n  }\n\n  handleChange = (e, { name, value }) => {\n    this.setState({ [name]: value });\n    console.log(\"icdDropDown value: \", value);\n    this.props.getDropdownValue(value);\n  }\n\n  render() {\n    return (\n      <Grid >\n        <Grid.Column>\n          <Form>\n            <Form.Field>\n              <Dropdown\n                selection\n                name='default'\n                options={this.props.icdDropOptions}\n                onChange={this.handleChange.bind(this)}\n                placeholder={this.props.placeholder }\n                fluid\n                search\n                selection\n              />\n            </Form.Field>\n          </Form>\n        </Grid.Column>\n      </Grid>\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Chart from 'react-google-charts'\n\nimport \"./style.css\";\nimport {Grid, Segment, Message, Header, Divider} from 'semantic-ui-react';\nimport Temporal from './Temporal';\nimport ICDropdown from './ICDropdown';\n\n// [\n//           \"RACE\",\n//           \"Year_death\",\n//           \"ICD_Code\",\n//           \"Sex\",\n//           \"total_count\",\n//           \"Subgroup_race\"\n//         ],\n//         [\n//           \"\",\n//           \"2003\",\n//           \"I25\",\n//           \"M\",\n//           \"10\",\n//           \"Asian Indian\"\n//         ],\n\n// \"values\": [\n//         [\n//           \"Cause_of_death\",\n//           \"Subgroup\",\n//           \"Year\",\n//           \"Male\",\n//           \"Female\"\n//         ],\n//         [\n//           \"Accidents (unintentional injuries\",\n//           \"Asian Indian\",\n//           \"2003\",\n//           \"46\",\n//           \"91\"\n//         ],\n//         [\n\nconst API = 'https://sheets.googleapis.com/v4/spreadsheets/1hdtsYfl2WSAFCGwF1KISL6SchL1y6YSp5Y07nyYFLWQ/values:batchGet?ranges=pydfall&majorDimension=ROWS&key=AIzaSyB0CGGN8RdsTmZ2gqnuHDuik_lhuN6LxBY'\n\nconst asian_icd = [\"Asian Indian\", \"Chinese\", \"Filipino\", \"Japanese\", \"Korean\", \"Vietnamese\"];\n\n\nclass icdTables extends React.Component {\n\n  constructor(){\n    super();\n    this.state = {\n      yr: [\"2003\", \"2004\", \"2005\",\"2006\", \"2007\", \"2008\",\"2009\", \"2010\", \"2011\",\"2012\", \"2013\", \"2014\",\"2015\",\"2016\",\"2017\"],\n      items:[],\n      icdData: [], \n      icdHeader: [],\n      subgroupHeader: [], // should match the rows of data [W, W, B, B, ]\n      icdDropOptions: [],\n      selectedOptions: [],\n      dataReady: false\n    }; \n  }\n\n\n\n  componentDidMount(){\n    fetch(API).then(response => response.json()).then(data => {\n      let batchRowValues = data.valueRanges[0].values;\n      const rows = [];\n      for (let i = 1; i < batchRowValues.length; i++) {\n        let rowObject = {};\n        for (let j = 0; j < batchRowValues[i].length; j++) {\n          rowObject[batchRowValues[0][j]] = batchRowValues[i][j];\n        }\n        rows.push(rowObject);\n      }\n\n      this.setState({ items: rows });\n      console.log(\"this.state.items: \", this.state.items);\n\n      // Shape the array\n\n      var icdHeader = []; // contains the diseases in order: G24, G25\n      var icdContents = []; // saves all of the groupContent data from a particular subgroup\n      var icdDataTmp = []; // icdContents is saved here whenever the diseases changes\n      var subgroupHeader = []; // contains the subgroup races (I, K, C) for a particular disease \n      var subgroupTmp = []; // contains the subgroup races: Indian, Korean, etc\n      var groupContents = [['Year', 'Male', 'Female']]; \n\n      // for each subgroup, 6 lines of data + header\n      // there are three subgrups\n      // there are 2 icd codes\n\n      var currDisease = this.state.items[0].ICD_Code;\n      icdHeader.push(currDisease);\n\n      var currGroup = this.state.items[0].Subgroup_race;\n      subgroupTmp.push(currGroup); \n\n\n      for (let i = 0; i < this.state.items.length; i++) {\n        let item = this.state.items[i];\n\n        if (item.ICD_Code === currDisease) {\n          if (item.Subgroup_race === currGroup) {\n            groupContents.push( [item.Year_death, parseInt(item.Male), parseInt(item.Female)] );\n          } else {\n            icdContents.push(groupContents); // saves a subgroup's data\n            groupContents = [['Year', 'Male', 'Female']];\n            currGroup = item.Subgroup_race;\n            subgroupTmp.push(currGroup); /////////////////\n            groupContents.push( [item.Year_death, parseInt(item.Male), parseInt(item.Female)] );\n          } \n\n        } else {\n\n          currDisease = item.ICD_Code;\n          icdHeader.push(currDisease)\n          subgroupHeader.push(subgroupTmp); /////////////////\n\n          subgroupTmp = []\n\n          currGroup = item.Subgroup_race;\n          subgroupTmp.push(currGroup);\n          \n          \n          icdContents.push(groupContents); // its a new icd, so save the last year from the previous icd\n          icdDataTmp.push(icdContents); // saves a icd's data\n          \n          icdContents = [];\n          groupContents = [['Year', 'Male', 'Female']];\n          groupContents.push( [item.Year_death, parseInt(item.Male), parseInt(item.Female)] );\n        }\n      }\n      \n\n\n      icdContents.push(groupContents); // save the previous icd\n      icdDataTmp.push(icdContents);\n\n      subgroupHeader.push(subgroupTmp);\n\n      // console.log(icdHeader)\n     var icdOptionsSorted = [... new Set(icdHeader)].sort()\n     // console.log(icdOptionsSorted)\n     \n\n      this.setState({ \n        icdData: icdDataTmp, \n        icdHeader: icdHeader,\n        subgroupHeader: subgroupHeader,\n        dataReady: true \n      });  \n\n     console.log(\"this.state.icdData: \",this.state.icdData);\n\n // Get the icdDropOptions into key, text, value\n\n\n      var icdOptionsReady = []\n      icdOptionsSorted.forEach(item => \n        icdOptionsReady.push({ key: item, text: item, value: item })\n      );\n\n      this.setState({ \n        icdDropOptions: icdOptionsReady\n      });  \n\n\n//      console.log(\"icdDropOptions: \", this.state.icdDropOptions);\n\n\n\n    });\n  }\n\n  getDropdownValue = value => {\n    console.log(\"picker value: \", value)\n    this.setState(\n        { selectedOptions: value }, \n        function () {\n          console.log(\"selectedOptions: \", this.state.selectedOptions);\n        }\n    );\n  }\n\n\n  // For each disease, pass the 6 icds to temporal\n\n  render() {\n    return (\n      <div>\n\n        <ICDropdown \n          icdDropOptions={this.state.icdDropOptions}\n          getDropdownValue={this.getDropdownValue.bind(this)}\n        />\n\n        {this.state.dataReady &&  \n\n          this.state.selectedOptions.map((d, idx) => (  // each icd is a year w/ info about the 6 groups\n            <div key={idx}>\n              <div>{d}</div>\n                <Temporal \n                  icd={this.state.icdData[idx]}\n                  icdHeader={this.state.icdHeader[idx]}\n                  subgroupHeader={this.state.subgroupHeader[idx]}  // [Chinese, Viet]\n                />\n            </div>\n          ))}\n\n         \n      </div>\n    ); \n  } // end render\n\n  \n}  \n\nexport default icdTables;\n\n// {this.state.dataReady && this.state.icdData.map((icd, idx) => (  // each icd is a year w/ info about the 6 groups\n//             <div key={idx}>\n//                 <Temporal \n//                   icd={icd}\n//                 />\n//             </div>\n//          ))}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Chart from 'react-google-charts'\n\nimport \"./style.css\";\nimport {Grid, Segment, Message, Header, Divider} from 'semantic-ui-react';\nimport Temporal from './Temporal';\nimport ICDropdown from './ICDropdown';\n\n// [\n//           \"RACE\",\n//           \"Year_death\",\n//           \"ICD_Code\",\n//           \"Sex\",\n//           \"total_count\",\n//           \"Subgroup_race\"\n//         ],\n//         [\n//           \"\",\n//           \"2003\",\n//           \"I25\",\n//           \"M\",\n//           \"10\",\n//           \"Asian Indian\"\n//         ],\n\n// \"values\": [\n//         [\n//           \"Cause_of_death\",\n//           \"Subgroup\",\n//           \"Year\",\n//           \"Male\",\n//           \"Female\"\n//         ],\n//         [\n//           \"Accidents (unintentional injuries\",\n//           \"Asian Indian\",\n//           \"2003\",\n//           \"46\",\n//           \"91\"\n//         ],\n//         [\n\nconst API = 'https://sheets.googleapis.com/v4/spreadsheets/1hdtsYfl2WSAFCGwF1KISL6SchL1y6YSp5Y07nyYFLWQ/values:batchGet?ranges=pydfall&majorDimension=ROWS&key=AIzaSyB0CGGN8RdsTmZ2gqnuHDuik_lhuN6LxBY'\n\n\nclass icdTables extends React.Component {\n\n  constructor(){\n    super();\n    this.state = {\n\n      items:[],\n      icdDict: [], \n\n      icdDropOptions: [],\n      selectedOptions: [],\n      dataReady: false, \n      optionsReady: false,\n      drawGraph: false\n    }; \n  }\n\n  componentDidMount(){\n    fetch(API).then(response => response.json()).then(data => {\n      let batchRowValues = data.valueRanges[0].values;\n      const rows = [];\n      for (let i = 1; i < batchRowValues.length; i++) {\n        let rowObject = {};\n        for (let j = 0; j < batchRowValues[i].length; j++) {\n          rowObject[batchRowValues[0][j]] = batchRowValues[i][j];\n        }\n        rows.push(rowObject);\n      }\n\n      this.setState({ items: rows });\n      console.log(\"this.state.items: \", this.state.items);\n\n      var icdDict = {};\n      for (let i = 0; i < this.state.items.length; i++) {\n        var item = this.state.items[i];\n        var currICD = item.ICD_Code;\n        var currRace = item.Subgroup_race;\n        if (!(currICD in icdDict)) {  // icdDict[\"G24\"] = {}\n          icdDict[currICD] = {};\n        }\n        if (!(currRace in icdDict[currICD])) {  // icdDict[\"G24\"] = { Indian: [], Korean: [], Chinse: [].   }\n          icdDict[currICD][currRace] = [['Year', 'Male', 'Female']];\n        }\n        // icdDict[\"G24\"] = { Indian: [ [Y,M,F],[Y,M,F],[Y,M,F],[Y,M,F],[Y,M,F]   ], Korean: [], Chinse: [].   }\n        icdDict[currICD][currRace].push([item.Year_death, parseInt(item.Male), parseInt(item.Female)]);\n      }\n\n      this.setState({ \n        icdDict: icdDict, \n        dataReady: true \n      });  \n\n      // console.log(\"this.state.icdDict: \",this.state.icdDict);\n\n      const keys = Object.keys(this.state.icdDict)\n      var icdOptionsSorted = [... new Set(keys)].sort()\n\n      // Change here to map to ICD codes\n      var icdOptionsReady = [];\n      icdOptionsSorted.forEach(item => \n        icdOptionsReady.push({ key: item, text: item, value: item })\n      );\n\n      this.setState(\n        { \n          icdDropOptions: icdOptionsReady,\n          optionsReady: true \n        }, \n        function () {\n          console.log(\"this.state.icdDropOptions: \", this.state.icdDropOptions[0]);\n          // this.populateRenderArray();\n        }\n      );\n\n\n    });\n  }\n\n  getDropdownValue = value => {\n    this.setState(\n        { selectedOptions: value }, \n        function () {\n          console.log(\"selectedOptions: \", this.state.selectedOptions);\n          this.populateRenderArray();\n        }\n    );\n  }\n\n\n  // For each disease, pass the 6 icds to temporal\n  // Given an ICD, go to dict, pull out all of the keys\n  // What do we want to pass to render?\n  // 1) The list of all of the selected diseases (keys from selectedOptions)\n  // 2) The array of subgroups for those diseases\n  //     index 0 = A02.            index 1 = A03.          index 2 = I10.  \n  // [  [ Ind, Korean, Chinese],[ Ind, Korean, Chinese],[ Ind, Korean, Chinese]   ]\n  populateRenderArray() {\n    var diseaseNames = this.state.selectedOptions;  // Selected icd's such as A02, A04, etc\n                                                        // The index corresponds with the ICD.             A02.                            A04\n    var subgroupNames = []; // For each of the selected disease, have an array of the subgroups    [  [Chinese, Vietnamese]     ,  [Japanese, Korean]...]\n    var diseaseInfo = [];   // For each of the selected diseases, have an arry of the info         [. [[YMF],[YMF],[YMF],[YMF]] , [[YMF],[YMF],[YMF],[YMF]]  ]\n    console.log(\"diseaseNames: \", diseaseNames)\n\n    if (diseaseNames.length > 0) {\n      for (let i = 0; i < diseaseNames.length; i++) {\n        var key = diseaseNames[i];\n        console.log(\"key \", key)\n        var raceDict = this.state.icdDict[key]\n        console.log(\"raceDict \", raceDict)\n        var tmp = [];\n          for (var j = 0; j < Object.keys(raceDict).length; j++) {\n            var race = Object.keys(raceDict)[j]\n            tmp.push(race);\n            diseaseInfo.push(raceDict[race])\n          }\n        subgroupNames.push(tmp);\n      }\n      console.log(\"subgroupNames: \", subgroupNames);\n\n      // drawGraph should be the same length at diseaseNames\n      // array of booleans to keep track of which diseases have\n      this.setState({ \n        diseaseNames: diseaseNames, \n        subgroupNames: subgroupNames,\n        diseaseInfo: diseaseInfo,\n        drawGraph: true\n      }); \n    }\n    \n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.optionsReady && \n          <div>\n          <ICDropdown \n            icdDropOptions={this.state.icdDropOptions}\n            getDropdownValue={this.getDropdownValue.bind(this)}\n          />\n          </div>\n        }\n\n        {this.state.drawGraph && this.state.diseaseNames.map((name, idx) => (\n          <div key={idx}>\n            <Temporal \n              icd={this.state.diseaseInfo}\n              icdHeader={name}\n              subgroupNames={this.state.subgroupNames[idx]}  \n            />\n          </div>\n        ))}\n\n      </div>\n    ); // end return\n  } // end render\n}  \n\nexport default icdTables;\n\n// {this.state.dataReady && this.state.icdData.map((icd, idx) => (  // each icd is a year w/ info about the 6 groups\n//             <div key={idx}>\n//                 <Temporal \n//                   icd={icd}\n//                 />\n//             </div>\n//          ))}\n\n\n// {this.state.dataReady &&  \n\n//           this.state.diseaseName.map((name, idx) => (  // each icd is a year w/ info about the 6 groups\n//             <div key={idx}>\n//               <div>{name}</div>\n//                 <Temporal \n//                   icd={this.state.diseaseInfo}\n//                   icdHeader={name}\n//                   subgroupHeader={this.state.subgroupNames}  \n//                 />\n//             </div>\n//             )\n//           )\n//         }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Chart from 'react-google-charts'\n\nimport \"./style.css\";\nimport {Grid, Segment, Message, Header, Divider} from 'semantic-ui-react';\nimport Temporal from './Temporal';\nimport DropdownCodes from './DropdownCodes';\n\n\nconst API = 'https://sheets.googleapis.com/v4/spreadsheets/1hdtsYfl2WSAFCGwF1KISL6SchL1y6YSp5Y07nyYFLWQ/values:batchGet?ranges=pydfall&majorDimension=ROWS&key=AIzaSyB0CGGN8RdsTmZ2gqnuHDuik_lhuN6LxBY'\n\n\nclass icdTables extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n\n\n      items:[],\n      icdDict: [], \n\n      icdDropOptions: [],\n      selectedOptions: [],\n      dataReady: false, \n      optionsReady: false,\n      drawGraph: false\n    }; \n  }\n\n  componentDidMount(){\n    fetch(API).then(response => response.json()).then(data => {\n      let batchRowValues = data.valueRanges[0].values;\n      const rows = [];\n      for (let i = 1; i < batchRowValues.length; i++) {\n        let rowObject = {};\n        for (let j = 0; j < batchRowValues[i].length; j++) {\n          rowObject[batchRowValues[0][j]] = batchRowValues[i][j];\n        }\n        rows.push(rowObject);\n      }\n\n      this.setState({ items: rows });\n      console.log(\"this.state.items: \", this.state.items);\n\n      var icdDict = {};\n      for (let i = 0; i < this.state.items.length; i++) {\n        var item = this.state.items[i];\n        var currICD = item.ICD_Code;\n        var currRace = item.Subgroup_race;\n        if (!(currICD in this.props.icdCodesDict)) {  // icdDict[\"G24\"] = {}\n          this.props.icdCodesDict[currICD] = [currICD];\n        }\n        if (!(currICD in icdDict)) {  // icdDict[\"G24\"] = {}\n          icdDict[currICD] = {};\n        }\n        if (!(currRace in icdDict[currICD])) {  // icdDict[\"G24\"] = { Indian: [], Korean: [], Chinse: [].   }\n          icdDict[currICD][currRace] = [['Year', 'Male', 'Female']];\n        }\n        // icdDict[\"G24\"] = { Indian: [ [Y,M,F],[Y,M,F],[Y,M,F],[Y,M,F],[Y,M,F]   ], Korean: [], Chinse: [].   }\n        icdDict[currICD][currRace].push([item.Year_death, parseInt(item.Male), parseInt(item.Female)]);\n      }\n\n      this.setState({ \n        icdDict: icdDict, \n        dataReady: true \n      });  \n\n      // console.log(\"this.state.icdDict: \",this.state.icdDict);\n\n      const keys = Object.keys(this.state.icdDict)\n      var icdOptionsSorted = [... new Set(keys)].sort()\n\n      // Change here to map to ICD codes\n      var icdOptionsReady = [];\n      icdOptionsSorted.forEach((item,idx)=> {\n        const arr = this.props.icdCodesDict[item];\n        icdOptionsReady.push({ key: item, text: `${arr[0]}: ${arr.slice(1).join(\", \")}`, value: item })\n      });\n\n      this.setState(\n        { \n          icdDropOptions: icdOptionsReady,\n          optionsReady: true \n        }, \n        function () {\n          // console.log(\"this.state.icdDropOptions: \", this.state.icdDropOptions[0]);\n          // this.populateRenderArray();\n        }\n      );\n\n\n    });\n  }\n\n  getDropdownValue = value => {\n    this.setState(\n        { selectedOptions: value }, \n        function () {\n          // console.log(\"selectedOptions: \", this.state.selectedOptions);\n          this.populateRenderArray();\n        }\n    );\n  }\n\n\n  // For each disease, pass the 6 icds to temporal\n  // Given an ICD, go to dict, pull out all of the keys\n  // What do we want to pass to render?\n  // 1) The list of all of the selected diseases (keys from selectedOptions)\n  // 2) The array of subgroups for those diseases\n  //     index 0 = A02.            index 1 = A03.          index 2 = I10.  \n  // [  [ Ind, Korean, Chinese],[ Ind, Korean, Chinese],[ Ind, Korean, Chinese]   ]\n  populateRenderArray() {\n    var diseaseName = this.state.selectedOptions;  // Selected icd such as A02, A04, etc\n                                                        // The index corresponds with the ICD.             A02.                            A04\n    var subgroupNames = []; // For each of the selected disease, have an array of the subgroups    [  [Chinese, Vietnamese]     ,  [Japanese, Korean]...]\n    var diseaseInfo = [];   // For each of the selected diseases, have an arry of the info         [. [[YMF],[YMF],[YMF],[YMF]] , [[YMF],[YMF],[YMF],[YMF]]  ]\n    // console.log(\"diseaseName: \", diseaseName)\n\n    var raceDict = this.state.icdDict[diseaseName];\n\n    for (var race in raceDict) {\n      var info = raceDict[race];\n      diseaseInfo.push(info);\n    }\n\n    // console.log(\"Object.keys(raceDict): \", Object.keys(raceDict));\n    // console.log(\"diseaseInfo: \", diseaseInfo);\n\n      // drawGraph should be the same length at diseaseName\n      // array of booleans to keep track of which diseases have\n    this.setState({ \n      diseaseName: diseaseName, \n      subgroupNames: Object.keys(raceDict),\n      diseaseInfo: diseaseInfo,\n      drawGraph: true\n    }); \n    \n  }\n\n  render() {\n    return (\n      <div>\n\n        <Segment padded='very' basic>\n          <a href=\"https://www.icd10data.com/ICD10CM/Codes\" target=\"_blank\">Explore ICD 10 Codes</a>\n        </Segment>\n\n\n        {this.state.optionsReady && \n          <div>\n          <DropdownCodes \n            icdDropOptions={this.state.icdDropOptions}\n            getDropdownValue={this.getDropdownValue.bind(this)}\n            placeholder='ICD Codes'\n          />\n          </div>\n        }\n\n        {this.state.drawGraph && \n            <Temporal \n              icd={this.state.diseaseInfo}\n              diseaseName={this.state.diseaseName}\n              subgroupNames={this.state.subgroupNames}  \n            />\n        }\n\n      </div>\n    ); // end return\n  } // end render\n}  \n\nexport default icdTables;\n\n// {this.state.dataReady && this.state.icdData.map((icd, idx) => (  // each icd is a year w/ info about the 6 groups\n//             <div key={idx}>\n//                 <Temporal \n//                   icd={icd}\n//                 />\n//             </div>\n//          ))}\n\n\n// {this.state.dataReady &&  \n\n//           this.state.diseaseName.map((name, idx) => (  // each icd is a year w/ info about the 6 groups\n//             <div key={idx}>\n//               <div>{name}</div>\n//                 <Temporal \n//                   icd={this.state.diseaseInfo}\n//                   icdHeader={name}\n//                   subgroupHeader={this.state.subgroupNames}  \n//                 />\n//             </div>\n//             )\n//           )\n//         }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Chart from 'react-google-charts'\n\nimport \"./style.css\";\nimport {Grid, Segment, Message, Header, Divider} from 'semantic-ui-react';\nimport Temporal from './Temporal';\nimport DropdownCodes from './DropdownCodes';\n\n\nconst API = 'https://sheets.googleapis.com/v4/spreadsheets/1w7QShd8OlMFReuD3M8QIbvzwqdm9p1Vh2V4YzsU-CmE/values:batchGet?ranges=leading_causes_six&majorDimension=ROWS&key=AIzaSyB0CGGN8RdsTmZ2gqnuHDuik_lhuN6LxBY'\n\n\nclass icdTables extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n\n\n      items:[],\n      icdDict: [], \n\n      icdDropOptions: [],\n      selectedOptions: [],\n      dataReady: false, \n      optionsReady: false,\n      drawGraph: false\n    }; \n  }\n\n  componentDidMount(){\n    fetch(API).then(response => response.json()).then(data => {\n      let batchRowValues = data.valueRanges[0].values;\n      const rows = [];\n      for (let i = 1; i < batchRowValues.length; i++) {\n        let rowObject = {};\n        for (let j = 0; j < batchRowValues[i].length; j++) {\n          rowObject[batchRowValues[0][j]] = batchRowValues[i][j];\n        }\n        rows.push(rowObject);\n      }\n\n      this.setState({ items: rows });\n      console.log(\"this.state.items: \", this.state.items);\n\n      var icdDict = {};\n      for (let i = 0; i < this.state.items.length; i++) {\n        var item = this.state.items[i];\n\n        var currICD = item.Description;\n        var currRace = item.RaceText;\n\n        if (!(currICD in this.props.icdCodesDict)) {  // icdDict[\"G24\"] = {}\n          this.props.icdCodesDict[currICD] = [currICD];\n        }\n        if (!(currICD in icdDict)) {  // icdDict[\"G24\"] = {}\n          icdDict[currICD] = {};\n        }\n        // If the years are the same, keep a running sum\n\n        if (!(currRace in icdDict[currICD])) {  // icdDict[\"G24\"] = { Indian: [], Korean: [], Chinse: [].   }\n          icdDict[currICD][currRace] = [['Year', 'Male', 'Female']];\n        } \n\n        // icdDict[\"G24\"] = { Indian: [ [Y,M,F],[Y,M,F],[Y,M,F],[Y,M,F],[Y,M,F]   ], Korean: [], Chinse: [].   }\n        icdDict[currICD][currRace].push([item.Year_death, parseInt(item.M), parseInt(item.F)]);\n      }\n\n\n      this.setState({ \n        icdDict: icdDict, \n        dataReady: true \n      });  \n\n      \n      console.log(\"this.state.icdDict: \",this.state.icdDict);\n\n      const keys = Object.keys(this.state.icdDict)\n      var icdOptionsSorted = [... new Set(keys)].sort()\n\n      // Change here to map to ICD codes\n      var icdOptionsReady = [];\n      icdOptionsSorted.forEach((item,idx)=> {\n        const arr = this.props.icdCodesDict[item];\n        icdOptionsReady.push({ key: item, text: arr, value: item })\n      });\n\n      this.setState(\n        { \n          icdDropOptions: icdOptionsReady,\n          optionsReady: true \n        }, \n        function () {\n          // console.log(\"this.state.icdDropOptions: \", this.state.icdDropOptions);\n          // this.populateRenderArray();\n        }\n      );\n\n\n    });\n  }\n\n  getDropdownValue = value => {\n    this.setState(\n        { selectedOptions: value }, \n        function () {\n          // console.log(\"selectedOptions: \", this.state.selectedOptions);\n          this.populateRenderArray();\n        }\n    );\n  }\n\n\n  // For each disease, pass the 6 icds to temporal\n  // Given an ICD, go to dict, pull out all of the keys\n  // What do we want to pass to render?\n  // 1) The list of all of the selected diseases (keys from selectedOptions)\n  // 2) The array of subgroups for those diseases\n  //     index 0 = A02.            index 1 = A03.          index 2 = I10.  \n  // [  [ Ind, Korean, Chinese],[ Ind, Korean, Chinese],[ Ind, Korean, Chinese]   ]\n  populateRenderArray() {\n    var diseaseName = this.state.selectedOptions;  // Selected icd such as A02, A04, etc\n                                                        // The index corresponds with the ICD.             A02.                            A04\n    var subgroupNames = []; // For each of the selected disease, have an array of the subgroups    [  [Chinese, Vietnamese]     ,  [Japanese, Korean]...]\n    var diseaseInfo = [];   // For each of the selected diseases, have an arry of the info         [. [[YMF],[YMF],[YMF],[YMF]] , [[YMF],[YMF],[YMF],[YMF]]  ]\n    // console.log(\"diseaseName: \", diseaseName)\n\n    var raceDict = this.state.icdDict[diseaseName];\n\n    for (var race in raceDict) {\n      var info = raceDict[race];\n      diseaseInfo.push(info);\n    }\n\n    // console.log(\"Object.keys(raceDict): \", Object.keys(raceDict));\n    // console.log(\"diseaseInfo: \", diseaseInfo);\n\n      // drawGraph should be the same length at diseaseName\n      // array of booleans to keep track of which diseases have\n    this.setState({ \n      diseaseName: diseaseName, \n      subgroupNames: Object.keys(raceDict),\n      diseaseInfo: diseaseInfo,\n      drawGraph: true\n    }); \n    \n  }\n\n  render() {\n    return (\n      <div>\n\n        <Segment basic>\n        </Segment>\n\n\n        {this.state.optionsReady && \n          <div>\n          <DropdownCodes \n            icdDropOptions={this.state.icdDropOptions}\n            getDropdownValue={this.getDropdownValue.bind(this)}\n            placeholder='Leading Causes of Death'\n          />\n          </div>\n        }\n\n        {this.state.drawGraph && \n            <Temporal \n              icd={this.state.diseaseInfo}\n              diseaseName={this.state.diseaseName}\n              subgroupNames={this.state.subgroupNames}  \n            />\n        }\n\n      </div>\n    ); // end return\n  } // end render\n}  \n\nexport default icdTables;\n\n// {this.state.dataReady && this.state.icdData.map((icd, idx) => (  // each icd is a year w/ info about the 6 groups\n//             <div key={idx}>\n//                 <Temporal \n//                   icd={icd}\n//                 />\n//             </div>\n//          ))}\n\n\n// {this.state.dataReady &&  \n\n//           this.state.diseaseName.map((name, idx) => (  // each icd is a year w/ info about the 6 groups\n//             <div key={idx}>\n//               <div>{name}</div>\n//                 <Temporal \n//                   icd={this.state.diseaseInfo}\n//                   icdHeader={name}\n//                   subgroupHeader={this.state.subgroupNames}  \n//                 />\n//             </div>\n//             )\n//           )\n//         }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Chart from 'react-google-charts'\n\n\nimport \"./style.css\";\nimport {Grid, Segment, Message, Header, Divider} from 'semantic-ui-react'\n\nimport CauseGraph from './CauseGraph';\n\n// {this.state.dataReady && <ScatterChart \n//                   dataObjs={this.state.plotData}\n//                   x_var={this.state.option1}\n//                   y_var={this.state.option2}\n//                   display_trend={true} \n//                 />}\n\nconst colors = [['#0033cc', '#809fff'], ['#009933', '#4dff4d'],['#990099', '#ff4dff'],\n['#ff9933', '#ffcc99'],['#ffff00', '#fff0b3'],['#996633', '#c68c53'], ['#ff0000', '#ff9999'],\n['#33bbff', '#b3e6ff'], ['#99ff99', '#ccffcc'], ['#ff80bf', '#ffcce6'], ['#ffc34d', '#ffe6b3'], ['#666699', '#c2c2d6']]\n\nclass Temporal extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      icdData: this.props.icd,  // icdData should contain the [Year, M, F] for every subgroup of this one disease\n      icdHeader: this.props.diseaseName,\n      subgroupNames: this.props.subgroupNames // should be the subgroups only for a particular disease\n    };\n\n  }\n\n  render() {\n\n    return (\n      <div>\n\n        <Grid stackable columns={2} centered>\n          \n            {this.props.icd.map((icd, idx) => (  // each icd is a year w/ info about the 6 groups\n            <div key={idx}>\n\n              <Grid.Column>\n                    <Segment basic fluid>\n\n                      <Chart\n                        width= '100%'\n                        height= '100%'\n                        chartType=\"ColumnChart\"\n                        loader={<div>Loading Chart</div>}\n                        data={icd}\n                        options={{\n                          title: this.props.subgroupNames[idx],\n                          chartArea: {top: 20, width: this.props.width },\n                          colors: colors[idx],\n                          hAxis: {\n                            title: 'Age Group',\n                            minValue: 0,\n                          },\n                          vAxis: {\n                            title: 'Age Adjusted Count',\n                          },\n                          legend: 'none'\n                        }}\n                        legendToggle\n                      />\n\n                    </Segment>\n              </Grid.Column>\n            </div>\n          ))}\n          \n\n          \n        </Grid>\n\n          \n \n\n      </div>\n    );\n  }\n}  \n\nexport default Temporal;\n\n// <Grid.Column>\n//             <CauseGraph\n//               icdData={this.state.icdData[0]}\n//               colors={['#0033cc', '#809fff']}\n//               width='100%'\n//               subgroup='Asian Indian'\n//             />\n//           </Grid.Column>\n          \n//           <Grid.Column>\n//             <CauseGraph\n//               icdData={this.state.icdData[1]}\n//               colors={['#009933', '#4dff4d']}\n//               width='100%'\n//               subgroup='Chinese'\n//             />\n//           </Grid.Column>\n\n//           <Grid.Column>\n//             <CauseGraph\n//               icdData={this.state.icdData[2]}\n//               colors={['#990099', '#ff4dff']}\n//               width='100%'\n//               subgroup='Filipino'\n//             />\n//           </Grid.Column>\n\n//           <Grid.Column>\n//             <CauseGraph\n//               icdData={this.state.icdData[3]}\n//               colors={['#ff9933', '#ffcc99']}\n//               width='100%'\n//               subgroup='Japanese'\n//             />\n//           </Grid.Column>\n\n//           <Grid.Column>\n//             <CauseGraph\n//               icdData={this.state.icdData[4]}\n//               colors={['#ffff00', '#fff0b3']}\n//               width='100%'\n//               subgroup='Korean'\n//             />\n//           </Grid.Column>\n\n//           <Grid.Column>\n//             <CauseGraph\n//               icdData={this.state.icdData[5]}\n//               colors={['#996633', '#c68c53']}\n//               width='100%'\n//               subgroup='Vietnamese'\n//             />\n//           </Grid.Column>\n\n // <Grid.Column width={4}>\n          //   <Segment basic>\n          //     <Chart\n          //       height='80%'\n          //       chartType=\"ColumnChart\"\n          //       loader={<div>Loading Chart</div>}\n          //       data={this.state.icdData}\n          //       options={{\n          //         title: 'Aggregate',\n          //         chartArea: { left:80, top: 21, bottom: 40, width: '50%' },\n          //         colors: ['#ff0000', '#ff8080'],\n          //         legend: 'none'\n          //       }}\n          //       legendToggle\n          //     />\n          //   </Segment>\n          // </Grid.Column>\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Chart from 'react-google-charts'\n\nimport \"./style.css\";\nimport {Grid, Segment, Message, Header, Divider} from 'semantic-ui-react';\nimport AdjustedGraphs from './AdjustedGraphs';\nimport DropdownCodes from './DropdownCodes';\n\n\nconst API = 'https://sheets.googleapis.com/v4/spreadsheets/1pM84sGiyquMqW6OHB3MHp5MqDS_B5iKQppiSbkp2XWo/values:batchGet?ranges=vedant_leading&majorDimension=ROWS&key=AIzaSyB0CGGN8RdsTmZ2gqnuHDuik_lhuN6LxBY'\n\n\nclass icdTables extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n\n\n      items:[],\n      icdDict: [], \n\n      icdDropOptions: [],\n      selectedOptions: [],\n      dataReady: false, \n      optionsReady: false,\n      drawGraph: false\n    }; \n  }\n\n  componentDidMount(){\n    fetch(API).then(response => response.json()).then(data => {\n      let batchRowValues = data.valueRanges[0].values;\n      const rows = [];\n      for (let i = 1; i < batchRowValues.length; i++) {\n        let rowObject = {};\n        for (let j = 0; j < batchRowValues[i].length; j++) {\n          rowObject[batchRowValues[0][j]] = batchRowValues[i][j];\n        }\n        rows.push(rowObject);\n      }\n\n      this.setState({ items: rows });\n      console.log(\"this.state.items: \", this.state.items);\n\n      var icdDict = {};\n      for (let i = 0; i < this.state.items.length; i++) {\n        var item = this.state.items[i];\n\n        var currICD = item.Description + \" \" + \"(\" + item.Year_death + \")\";\n        var currRace = item.RaceText;\n\n        if (!(currICD in this.props.icdCodesDict)) {  // icdDict[\"G24\"] = {}\n          this.props.icdCodesDict[currICD] = [currICD];\n        }\n        if (!(currICD in icdDict)) {  // icdDict[\"G24\"] = {}\n          icdDict[currICD] = {};\n        }\n        // If the years are the same, keep a running sum\n\n        if (!(currRace in icdDict[currICD])) {  // icdDict[\"G24\"] = { Indian: [], Korean: [], Chinse: [].   }\n          icdDict[currICD][currRace] = [['Age Group', 'Male', 'Female']];\n        } \n\n        // icdDict[\"G24\"] = { Indian: [ [Y,M,F],[Y,M,F],[Y,M,F],[Y,M,F],[Y,M,F]   ], Korean: [], Chinse: [].   }\n        icdDict[currICD][currRace].push([item.AgeGroup, parseInt(item.M), parseInt(item.F)]);\n      }\n\n\n      this.setState({ \n        icdDict: icdDict, \n        dataReady: true \n      });  \n\n      \n      console.log(\"this.state.icdDict: \",this.state.icdDict);\n\n      const keys = Object.keys(this.state.icdDict)\n      var icdOptionsSorted = [... new Set(keys)].sort()\n\n      // Change here to map to ICD codes\n      var icdOptionsReady = [];\n      icdOptionsSorted.forEach((item,idx)=> {\n        const arr = this.props.icdCodesDict[item];\n        icdOptionsReady.push({ key: item, text: arr, value: item })\n      });\n\n      this.setState(\n        { \n          icdDropOptions: icdOptionsReady,\n          optionsReady: true \n        }, \n        function () {\n          // console.log(\"this.state.icdDropOptions: \", this.state.icdDropOptions);\n          // this.populateRenderArray();\n        }\n      );\n\n\n    });\n  }\n\n  getDropdownValue = value => {\n    this.setState(\n        { selectedOptions: value }, \n        function () {\n          // console.log(\"selectedOptions: \", this.state.selectedOptions);\n          this.populateRenderArray();\n        }\n    );\n  }\n\n\n  // For each disease, pass the 6 icds to temporal\n  // Given an ICD, go to dict, pull out all of the keys\n  // What do we want to pass to render?\n  // 1) The list of all of the selected diseases (keys from selectedOptions)\n  // 2) The array of subgroups for those diseases\n  //     index 0 = A02.            index 1 = A03.          index 2 = I10.  \n  // [  [ Ind, Korean, Chinese],[ Ind, Korean, Chinese],[ Ind, Korean, Chinese]   ]\n  populateRenderArray() {\n    var diseaseName = this.state.selectedOptions;  // Selected icd such as A02, A04, etc\n                                                        // The index corresponds with the ICD.             A02.                            A04\n    var subgroupNames = []; // For each of the selected disease, have an array of the subgroups    [  [Chinese, Vietnamese]     ,  [Japanese, Korean]...]\n    var diseaseInfo = [];   // For each of the selected diseases, have an arry of the info         [. [[YMF],[YMF],[YMF],[YMF]] , [[YMF],[YMF],[YMF],[YMF]]  ]\n    // console.log(\"diseaseName: \", diseaseName)\n\n    var raceDict = this.state.icdDict[diseaseName];\n\n    for (var race in raceDict) {\n      var info = raceDict[race];\n      diseaseInfo.push(info);\n    }\n\n    // console.log(\"Object.keys(raceDict): \", Object.keys(raceDict));\n    // console.log(\"diseaseInfo: \", diseaseInfo);\n\n      // drawGraph should be the same length at diseaseName\n      // array of booleans to keep track of which diseases have\n    this.setState({ \n      diseaseName: diseaseName, \n      subgroupNames: Object.keys(raceDict),\n      diseaseInfo: diseaseInfo,\n      drawGraph: true\n    }); \n    \n  }\n\n  render() {\n    return (\n      <div>\n\n        <Divider hidden />\n\n        {this.state.optionsReady && \n          <div>\n          <DropdownCodes \n            icdDropOptions={this.state.icdDropOptions}\n            getDropdownValue={this.getDropdownValue.bind(this)}\n            placeholder='Leading Causes of Death'\n          />\n          </div>\n        }\n\n        {this.state.drawGraph && \n            <AdjustedGraphs\n              icd={this.state.diseaseInfo}\n              diseaseName={this.state.diseaseName}\n              subgroupNames={this.state.subgroupNames}  \n            />\n        }\n\n      </div>\n    ); // end return\n  } // end render\n}  \n\nexport default icdTables;\n\n// {this.state.dataReady && this.state.icdData.map((icd, idx) => (  // each icd is a year w/ info about the 6 groups\n//             <div key={idx}>\n//                 <Temporal \n//                   icd={icd}\n//                 />\n//             </div>\n//          ))}\n\n\n// {this.state.dataReady &&  \n\n//           this.state.diseaseName.map((name, idx) => (  // each icd is a year w/ info about the 6 groups\n//             <div key={idx}>\n//               <div>{name}</div>\n//                 <Temporal \n//                   icd={this.state.diseaseInfo}\n//                   icdHeader={name}\n//                   subgroupHeader={this.state.subgroupNames}  \n//                 />\n//             </div>\n//             )\n//           )\n//         }\n","\nimport React, {Component} from 'react'\nimport Chart from 'react-google-charts'\nimport {Segment} from 'semantic-ui-react'\n\n\n\nclass CauseGraph extends Component {\n\n  \n\n  render(){\n\n\n    return(\n\n      <Segment basic>\n\n      <Chart\n        // width={700}\n        height='80%'\n        chartType=\"Bar\"\n        loader={<div>Loading Chart</div>}\n        data={this.props.yearData}\n        options={{\n          title: this.props.subgroupNames,\n          chartArea: {top: 20, width: this.props.width },\n          colors: this.props.colors,\n          // hAxis: {\n          //   title: 'Total Population',\n          //   minValue: 0,\n          // },\n          // vAxis: {\n          //   title: 'Count / 100,000',\n          // },\n          legend: {position: 'none'}\n        }}\n        legendToggle\n      />\n\n      </Segment>\n\n    );\n  }\n}\n\nexport default CauseGraph;\n\n\n\n\n\n\n\n// constructor(){\n//     super();\n//     this.state = {\n//       yearData: [\n//           ['Cause of death', 'Male', 'Female'],\n//           ['Heart disease', 8175000, 8008000],\n//           ['Malignant Neoplasms', 3792000, 3694000],\n//           ['Cerebralvascular Diseases', 2695000, 2896000],\n//           ['Chronic lower respiratory diseases', 2099000, 1953000],\n//           [\"Alzheimer's disease\", 1526000, 1517000],\n//       ],\n//       subgroup: 'Korean'\n\n//     };\n\n//   }\n  \n//   render() {\n\n//     return (\n//       <div>\n//         <Grid columns={3} stackable>\n\n//         <Grid.Row>\n\n\n//           <Grid.Column>\n//             <CauseSubgroups\n//               yearData={this.state.yearData}\n//               colors={['#0033cc', '#809fff']}\n//               width='100%'\n//               subgroup='Asian Indian'\n//             />\n//           </Grid.Column>\n          \n//           <Grid.Column>\n//             <TemporalSubgroup\n//               yearData={this.state.yearData}\n//               colors={['#009933', '#4dff4d']}\n//               width='100%'\n//               subgroup='Chinese'\n//             />\n//           </Grid.Column>\n\n//           <Grid.Column>\n//             <TemporalSubgroup\n//               yearData={this.state.yearData}\n//               colors={['#990099', '#ff4dff']}\n//               width='100%'\n//               subgroup='Filipino'\n//             />\n//           </Grid.Column>\n\n//           <Grid.Column>\n//             <TemporalSubgroup\n//               yearData={this.state.yearData}\n//               colors={['#ff9933', '#ffcc99']}\n//               width='100%'\n//               subgroup='Japanese'\n//             />\n//           </Grid.Column>\n\n//           <Grid.Column>\n//             <TemporalSubgroup\n//               yearData={this.state.yearData}\n//               colors={['#ffff00', '#fff0b3']}\n//               width='100%'\n//               subgroup={this.state.subgroup}\n//             />\n//           </Grid.Column>\n\n//           <Grid.Column>\n//             <TemporalSubgroup\n//               yearData={this.state.yearData}\n//               colors={['#996633', '#c68c53']}\n//               width='100%'\n//               subgroup='Vietnamese'\n//             />\n//           </Grid.Column>\n\n//         </Grid.Row>\n\n//       </Grid>\n\n//       </div>\n//     );\n//   }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Chart from 'react-google-charts'\n\nimport \"./style.css\";\nimport {Grid, Segment, Message, Header, Divider} from 'semantic-ui-react'\n\nimport SubgroupGraph from './SubgroupGraph';\n\n// {this.state.dataReady && <ScatterChart \n//                   dataObjs={this.state.plotData}\n//                   x_var={this.state.option1}\n//                   y_var={this.state.option2}\n//                   display_trend={true} \n//                 />}\n\nconst c = [['#0033cc', '#809fff'], ['#009933', '#4dff4d'],['#990099', '#ff4dff'],['#ff9933', '#ffcc99'],['#ffff00', '#fff0b3'],['#996633', '#c68c53']]\n\n//  THIS IS ONE SUBGROUP\n\nconst year_label = [\"2003\", \"2004\", \"2005\",\"2006\", \"2007\", \"2008\"]\n\nclass Temporal extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      race: this.props.race,  // icdData should contain the [Year, M, F] for every subgroup of this one disease\n      year: this.props.years,\n      info: this.props.info // should be the subgroups only for a particular disease\n    };\n\n  }\n\n\n\n  render() {\n\n    return (\n      <div>\n\n          \n          {this.props.info.map((yr, idx) => (  // each icd is a year w/ info about the 6 groups\n            <div key={idx}>\n                 <Grid.Column>\n                    <Header as='h4'>{year_label[idx]}</Header>\n                    <SubgroupGraph\n                      yearData={yr}\n                      colors={this.props.colors}\n                      width='70%'\n                      subgroupNames={this.props.years} // actually these are the years\n                    />\n                  </Grid.Column>\n            </div>\n          ))}\n      \n\n      </div>\n    );\n  }\n}  \n\nexport default Temporal;\n\n// <Grid.Column>\n//             <CauseGraph\n//               icdData={this.state.icdData[0]}\n//               colors={['#0033cc', '#809fff']}\n//               width='100%'\n//               subgroup='Asian Indian'\n//             />\n//           </Grid.Column>\n          \n//           <Grid.Column>\n//             <CauseGraph\n//               icdData={this.state.icdData[1]}\n//               colors={['#009933', '#4dff4d']}\n//               width='100%'\n//               subgroup='Chinese'\n//             />\n//           </Grid.Column>\n\n//           <Grid.Column>\n//             <CauseGraph\n//               icdData={this.state.icdData[2]}\n//               colors={['#990099', '#ff4dff']}\n//               width='100%'\n//               subgroup='Filipino'\n//             />\n//           </Grid.Column>\n\n//           <Grid.Column>\n//             <CauseGraph\n//               icdData={this.state.icdData[3]}\n//               colors={['#ff9933', '#ffcc99']}\n//               width='100%'\n//               subgroup='Japanese'\n//             />\n//           </Grid.Column>\n\n//           <Grid.Column>\n//             <CauseGraph\n//               icdData={this.state.icdData[4]}\n//               colors={['#ffff00', '#fff0b3']}\n//               width='100%'\n//               subgroup='Korean'\n//             />\n//           </Grid.Column>\n\n//           <Grid.Column>\n//             <CauseGraph\n//               icdData={this.state.icdData[5]}\n//               colors={['#996633', '#c68c53']}\n//               width='100%'\n//               subgroup='Vietnamese'\n//             />\n//           </Grid.Column>\n\n // <Grid.Column width={4}>\n          //   <Segment basic>\n          //     <Chart\n          //       height='80%'\n          //       chartType=\"ColumnChart\"\n          //       loader={<div>Loading Chart</div>}\n          //       data={this.state.icdData}\n          //       options={{\n          //         title: 'Aggregate',\n          //         chartArea: { left:80, top: 21, bottom: 40, width: '50%' },\n          //         colors: ['#ff0000', '#ff8080'],\n          //         legend: 'none'\n          //       }}\n          //       legendToggle\n          //     />\n          //   </Segment>\n          // </Grid.Column>\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Chart from 'react-google-charts'\n\nimport \"./style.css\";\nimport {Grid, Segment, Message, Header, Divider} from 'semantic-ui-react';\nimport SubgroupYears from './SubgroupYears';\n\n\n// {this.state.dataReady && <ScatterChart \n//                   dataObjs={this.state.plotData}\n//                   x_var={this.state.option1}\n//                   y_var={this.state.option2}\n//                   display_trend={true} \n//                 />}\n\n// const tableData = [\n//   { Cause: 'Heart disease', gender: 'M', Count: 15  },\n//   { Cause: 'tuberculosis', gender: 'F', Count: 40  },\n//   { Cause: 'malignant', gender: 'F', Count: 25 },\n//   { Cause: 'parasitic infection', gender: 'M', Count: 70 },\n// ]\n\n// ICD_Code: \"A02\"\n// Sex: \"F\"\n// Subgroup_race: \"White\"\n// Year_death: \"2003\"\n// total.count: \"14\"\n\nconst colors = [['#0033cc', '#809fff'], ['#009933', '#4dff4d'],['#990099', '#ff4dff'],['#ff9933', '#ffcc99'],['#ffff00', '#fff0b3'],['#996633', '#c68c53']]\n\n\n\nconst API = 'https://sheets.googleapis.com/v4/spreadsheets/1qzrBqwxbhnq7ctW7zMlZ_tL-ACWLdnOuFn4VcyNlTYU/values:batchGet?ranges=sheet1&majorDimension=ROWS&key=AIzaSyB0CGGN8RdsTmZ2gqnuHDuik_lhuN6LxBY'\n\nconst asian_subgroup = [\"Asian Indian\", \"Chinese\", \"Filipino\", \"Japanese\", \"Korean\", \"Vietnamese\"];\n\n\nclass SubgroupTables extends React.Component {\n\n  constructor(){\n    super();\n    this.state = {\n      yr: [\"2003\", \"2004\", \"2005\",\"2006\", \"2007\", \"2008\",\"2009\", \"2010\", \"2011\",\"2012\", \"2013\", \"2014\",\"2015\",\"2016\",\"2017\"],\n     items:[],\n     raceDict: {}, // don't need an obj explicitly saying 2003: ... 2004 ... the index is fine\n     dataReady: false\n    }; \n  }\n\n\n\n  componentDidMount(){\n   fetch(API).then(response => response.json()).then(data => {\n    let batchRowValues = data.valueRanges[0].values;\n    const rows = [];\n    for (let i = 1; i < batchRowValues.length; i++) {\n      let rowObject = {};\n      for (let j = 0; j < batchRowValues[i].length; j++) {\n        rowObject[batchRowValues[0][j]] = batchRowValues[i][j];\n      }\n      rows.push(rowObject);\n    }\n      this.setState({ items: rows });\n      // console.log(this.state.items);\n\n      var raceDict = {};\n      for (let i = 0; i < this.state.items.length; i++) {\n        var item = this.state.items[i];\n        \n        var currRace = item.Subgroup_race;\n        var currYear = item.Year_death;\n        var currICD = item.ICD_Code;\n\n        if (!(currRace in raceDict)) {  // icdDict[\"G24\"] = {}\n          raceDict[currRace] = {};\n        }\n        if (!(currYear in raceDict[currRace])) {  // icdDict[\"G24\"] = { Indian: [], Korean: [], Chinse: [].   }\n          raceDict[currRace][currYear] = [['Cause', 'Male', 'Female']];\n        }\n        // icdDict[\"G24\"] = { Indian: [ [Y,M,F],[Y,M,F],[Y,M,F],[Y,M,F],[Y,M,F]   ], Korean: [], Chinse: [].   }\n        raceDict[currRace][currYear].push([currICD.concat(\" (\",item.Sex,\")\"), parseInt(item.total_count),0]);\n      }\n\n      this.setState(\n        { \n          raceDict: raceDict, \n          dataReady: true \n        },\n        function () {\n          this.populateRenderArray();\n        }\n      );  \n     \n    });\n  }\n\n\n  populateRenderArray() {\n\n    var causeInfoArray = []\n    for (var race in this.state.raceDict) {\n      var yearDict = this.state.raceDict[race];\n      var causeInfo = [];\n      for (var year in yearDict) {\n        var info = yearDict[year];\n        causeInfo.push(info);\n      }\n      causeInfoArray.push(causeInfo);\n    }\n    // console.log(\"Object.keys(raceDict): \", Object.keys(raceDict));\n    // console.log(\"causeInfo: \", causeInfo);\n\n      // drawGraph should be the same length at raceName\n      // array of booleans to keep track of which diseases have\n    this.setState(\n      { causeInfoArray: causeInfoArray, drawGraph: true },\n      function () {\n        console.log(\"this.state.causeInfoArray: \",this.state.causeInfoArray);\n      }\n    ); \n\n  }\n\n  // Now render the Subgroups for 2003 and 2004\n  // Then in those subgroups, remove the number from the end \n  // In the subgroup, generate an array of array of data\n\n  render() {\n    return (\n      <div>\n        <div> \n          <a href=\"https://docs.google.com/spreadsheets/d/1hdtsYfl2WSAFCGwF1KISL6SchL1y6YSp5Y07nyYFLWQ/edit#gid=331576585\" target=\"_blank\">Link to data</a>\n          \n        </div>\n         {this.state.drawGraph && this.state.causeInfoArray.map((group, idx) => (\n            <div key={idx}>\n                <Divider horizontal>\n                  <Header as='h2' color='grey'>{Object.keys(this.state.raceDict)[idx]}</Header>\n                </Divider>\n                \n                <SubgroupYears \n                  race={Object.keys(this.state.raceDict)[idx]}\n                  years={Object.keys(this.state.raceDict[\"Chinese\"])[idx]}\n                  info={group}\n                  colors={colors[idx]}\n                />\n            </div>\n         ))}\n      </div>\n    ); \n  }\n\n  \n}  \n\nexport default SubgroupTables;\n\n              // <CauseSubgroups\n              //   year={year}\n              // />\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Chart from 'react-google-charts'\n\nimport \"./style.css\";\nimport {Image, Grid, Segment, Message, Header, Divider} from 'semantic-ui-react';\nimport Temporal from './Temporal';\nimport DropdownCodes from './DropdownCodes';\n\n\nconst API = 'https://sheets.googleapis.com/v4/spreadsheets/1w7QShd8OlMFReuD3M8QIbvzwqdm9p1Vh2V4YzsU-CmE/values:batchGet?ranges=leading_causes_six&majorDimension=ROWS&key=AIzaSyB0CGGN8RdsTmZ2gqnuHDuik_lhuN6LxBY'\n\n\nclass icdTables extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n\n\n      items:[],\n      subgroupDict: [], \n\n      icdDropOptions: [],\n      selectedOptions: [],\n      dataReady: false, \n      optionsReady: false,\n      drawGraph: false\n    }; \n  }\n\n  componentDidMount(){\n    fetch(API).then(response => response.json()).then(data => {\n      let batchRowValues = data.valueRanges[0].values;\n      const rows = [];\n      for (let i = 1; i < batchRowValues.length; i++) {\n        let rowObject = {};\n        for (let j = 0; j < batchRowValues[i].length; j++) {\n          rowObject[batchRowValues[0][j]] = batchRowValues[i][j];\n        }\n        rows.push(rowObject);\n      }\n\n      this.setState({ items: rows });\n      console.log(\"this.state.items: \", this.state.items);\n\n      var subgroupDict = {};\n      for (let i = 0; i < this.state.items.length; i++) {\n        var item = this.state.items[i];\n\n        // Sorry about the horrible variable names I literally just swapped them\n        var currICD = item.RaceText;\n        var currRace = item.Description;\n\n        if (!(currICD in this.props.icdCodesDict)) {  // subgroupDict[\"G24\"] = {}\n          this.props.icdCodesDict[currICD] = [currICD];\n        }\n        if (!(currICD in subgroupDict)) {  // subgroupDict[\"G24\"] = {}\n          subgroupDict[currICD] = {};\n        }\n        // If the years are the same, keep a running sum\n\n        if (!(currRace in subgroupDict[currICD])) {  // subgroupDict[\"G24\"] = { Indian: [], Korean: [], Chinse: [].   }\n          subgroupDict[currICD][currRace] = [['Year', 'Male', 'Female']];\n        } \n\n        // subgroupDict[\"G24\"] = { Indian: [ [Y,M,F],[Y,M,F],[Y,M,F],[Y,M,F],[Y,M,F]   ], Korean: [], Chinse: [].   }\n        subgroupDict[currICD][currRace].push([item.Year_death, parseInt(item.M), parseInt(item.F)]);\n      }\n\n\n      this.setState({ \n        subgroupDict: subgroupDict, \n        dataReady: true \n      });  \n\n      \n      // console.log(\"this.state.subgroupDict: \",this.state.subgroupDict);\n\n      const keys = Object.keys(this.state.subgroupDict)\n      var icdOptionsSorted = [... new Set(keys)].sort()\n\n      // Change here to map to ICD codes\n      var icdOptionsReady = [];\n      icdOptionsSorted.forEach((item,idx)=> {\n        const arr = this.props.icdCodesDict[item];\n        icdOptionsReady.push({ key: item, text: arr, value: item })\n      });\n\n      this.setState(\n        { \n          icdDropOptions: icdOptionsReady,\n          optionsReady: true \n        }, \n        function () {\n          // console.log(\"this.state.icdDropOptions: \", this.state.icdDropOptions);\n          // this.populateRenderArray();\n        }\n      );\n\n\n    });\n  }\n\n  getDropdownValue = value => {\n    this.setState(\n        { selectedOptions: value }, \n        function () {\n          // console.log(\"selectedOptions: \", this.state.selectedOptions);\n          this.populateRenderArray();\n        }\n    );\n  }\n\n\n  // For each subgroup, pass the causes of death to temporal\n \n  populateRenderArray() {\n    // Create an array for the leading causes of death\n    var leading_causes = [\"Malignant neoplasms\", \"Diseases of the heart\", \"Cerebrovascular diseases\", \"Accidents (unintentional injuries)\", \"Diabetes mellitus\", \"Alzheimer's diseases\", \"Influenza and pneumonia\", \"Chronic lower respiratory diseases\", \"Intentional self-harm (suicide)\", \"Nephritis, nephrotic syndrome and nephrosis\", \"Septicemia\", \"Chronic liver disease and cirrhosis\", \"Assault (homicide)\"];\n\n    var subgroupName = this.state.selectedOptions;  // Selected subgroup such as Korean\n    var subgroupNames = []; // For each of the subgroup, have an array of the top causes    \n    var diseaseInfo = [];   // For each of the subgroup, have an arry of the info         [. [[YMF],[YMF],[YMF],[YMF]] , [[YMF],[YMF],[YMF],[YMF]]  ]\n\n    var oneSubgroupDict = this.state.subgroupDict[subgroupName]; // subgroupName is actually subgroup\n\n    \n    for (var cause in oneSubgroupDict) { \n      var info = oneSubgroupDict[cause];\n      var currIndex = leading_causes.indexOf(cause);\n      console.log(\"cause \", cause)\n      console.log(\"currindex \", currIndex)\n      diseaseInfo.splice(currIndex, 0, info)\n      subgroupNames.splice(currIndex, 0, cause)\n    }\n\n\n    console.log(\"subgroupNames: \", subgroupNames)\n    \n    this.setState({ \n      subgroupName: subgroupName, \n      subgroupNames: subgroupNames,\n      diseaseInfo: diseaseInfo,\n      drawGraph: true\n    }); \n    \n  }\n\n  render() {\n    return (\n      <div>\n\n        <Segment basic>\n        </Segment>\n\n\n        {this.state.optionsReady && \n          <div>\n          <DropdownCodes \n            icdDropOptions={this.state.icdDropOptions}\n            getDropdownValue={this.getDropdownValue.bind(this)}\n            placeholder='Subgroup'\n          />\n          </div>\n        }\n\n        {this.state.drawGraph && \n            <Temporal \n              icd={this.state.diseaseInfo}\n              subgroupName={this.state.subgroupName}\n              subgroupNames={this.state.subgroupNames}  \n            />\n        }\n\n      </div>\n    ); // end return\n  } // end render\n}  \n\nexport default icdTables;\n\n          // <Image src={'images/lead_cause.png'} />\n\n\n// {this.state.dataReady && this.state.icdData.map((icd, idx) => (  // each icd is a year w/ info about the 6 groups\n//             <div key={idx}>\n//                 <Temporal \n//                   icd={icd}\n//                 />\n//             </div>\n//          ))}\n\n\n// {this.state.dataReady &&  \n\n//           this.state.subgroupName.map((name, idx) => (  // each icd is a year w/ info about the 6 groups\n//             <div key={idx}>\n//               <div>{name}</div>\n//                 <Temporal \n//                   icd={this.state.diseaseInfo}\n//                   icdHeader={name}\n//                   subgroupHeader={this.state.subgroupNames}  \n//                 />\n//             </div>\n//             )\n//           )\n//         }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport \"./style.css\";\nimport {Grid, Segment, Message, Header} from 'semantic-ui-react'\n\nimport Tabs from './Tabs';\n\nimport Correlation from './Correlation';\nimport Temporal from './Temporal';\nimport CauseYears from './CauseYears';\nimport TempDisease from './TempDisease';\n\nimport SubgroupTables from './SubgroupTables';\nimport ICDPicker from './ICDPicker';\nimport ICDExplorer from './ICDExplorer';\nimport ICDSelector from './ICDSelector';\n\nimport LeadingSelector from './LeadingSelector';\nimport Adjusted from './Adjusted';\n\nimport SubgroupGraphs from './SubgroupGraphs';\n\nimport AsianSubgroups from './AsianSubgroups';\n\n\nconst API = 'https://sheets.googleapis.com/v4/spreadsheets/1-ZWUaE-ckYbkhzsaWXwm9mq1NCkw6BmAq__fzqOSjps/values:batchGet?ranges=icdcodes&majorDimension=ROWS&key=AIzaSyB0CGGN8RdsTmZ2gqnuHDuik_lhuN6LxBY'\n\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n    this.state = {\n      icdCodesDict: {}, \n      icdReady: false\n    }; \n  }\n\n  componentDidMount(){\n    fetch(API).then(response => response.json()).then(data => {\n      let batchRowValues = data.valueRanges[0].values;\n      const rows = [];\n      for (let i = 1; i < batchRowValues.length; i++) {\n        let rowObject = {};\n        for (let j = 0; j < batchRowValues[i].length; j++) {\n          rowObject[batchRowValues[0][j]] = batchRowValues[i][j];\n        }\n        rows.push(rowObject);\n      }\n\n      this.setState({ items: rows });\n      console.log(\"icdCodesDICT this.state.items: \", this.state.items);\n\n      var icdCodesDict = {};\n      for (let i = 0; i < this.state.items.length; i++) {\n        var item = this.state.items[i];\n        var icd_trunc = item.ICD_trunc;\n        var icd_desc = item.ICD_desc;\n        if (!(icd_trunc in icdCodesDict)) {  // icdDict[\"G24\"] = {}\n          // icdCodesDict[icd_trunc] = [icd_trunc.concat(\": \")];\n          icdCodesDict[icd_trunc] = [];\n          icdCodesDict[icd_trunc].push(icd_trunc);\n        }\n        // icdDict[\"G24\"] = { Indian: [ [Y,M,F],[Y,M,F],[Y,M,F],[Y,M,F],[Y,M,F]   ], Korean: [], Chinse: [].   }\n        // icdCodesDict[icd_trunc].push(icd_desc.concat(\", \"));\n        icdCodesDict[icd_trunc].push(icd_desc);\n\n      }\n\n      this.setState({ icdCodesDict: icdCodesDict, icdReady: true });\n\n    });\n  }\n\n  \n  render() {\n\n    return (\n      <div className='body-container'>\n\n        <div>\n          <h1>Causes of Death Among Asian American Subgroups</h1>\n\n          <Tabs>\n            <div label=\"Leading Causes (Age and Population Adjusted)\">\n              {this.state.icdReady &&\n              <Adjusted \n                icdCodesDict={this.state.icdCodesDict}\n              />\n              }\n            </div>\n\n            <div label=\"Leading Causes (Not adjusted)\">\n              {this.state.icdReady &&\n              <LeadingSelector \n                icdCodesDict={this.state.icdCodesDict}\n              />\n              }\n            </div>\n\n            <div label=\"By Subgroup (Not adjusted)\">\n              {this.state.icdReady &&\n              <AsianSubgroups\n                icdCodesDict={this.state.icdCodesDict}\n              />\n              }\n            </div>\n           \n            <div label=\"ICD (Not adjusted)\">\n              {this.state.icdReady &&\n              <ICDSelector \n                icdCodesDict={this.state.icdCodesDict}\n              />\n              }\n            </div>\n          </Tabs>\n           \n        </div>\n      \n       \n\n      </div>\n    );\n  }\n}  \n\nexport default App;\n\n// <div label=\"Correlation\">\n//             <Correlation />\n//           </div>\n\n// <Tabs>\n      \n\n           \n//             <div label=\"ICD\">\n//               {this.state.icdReady &&\n//               <ICDSelector \n//                 icdCodesDict={this.state.icdCodesDict}\n//               />\n//               }\n//             </div>\n           \n//           <div label=\"Top Causes Of Death\">\n//               {this.state.icdReady &&\n//               <SubgroupGraphs \n//                 icdCodesDict={this.state.icdCodesDict}\n//               />\n//               }\n//           </div>\n\n//           <div label=\"Table\">\n//             <SubgroupTables />\n//           </div>\n\n//           <div label=\"Causes of death (grouped)\">\n//             <CauseYears />\n//           </div>\n          \n          \n//         </Tabs>\n\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Container, Header, List } from \"semantic-ui-react\";\n\n\n// TODO: Switch to https://github.com/palmerhq/the-platform#stylesheet when it will be stable\nconst styleLink = document.createElement(\"link\");\nstyleLink.rel = \"stylesheet\";\nstyleLink.href = \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\ndocument.head.appendChild(styleLink);\n\n\nReactDOM.render(\n\t<App />,\n\tdocument.querySelector('#root')\n);"],"sourceRoot":""}